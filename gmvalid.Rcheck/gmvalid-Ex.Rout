
R version 2.6.0 (2007-10-03)
Copyright (C) 2007 The R Foundation for Statistical Computing
ISBN 3-900051-07-0

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ### * <HEADER>
> ###
> attach(NULL, name = "CheckExEnv")
> assign("nameEx", 
+        local({
+ 	   s <- "__{must remake R-ex/*.R}__"
+            function(new) {
+                if(!missing(new)) s <<- new else s
+            }
+        }),
+        pos = "CheckExEnv")
> ## Add some hooks to label plot pages for base and grid graphics
> assign("base_plot_hook",
+        function() {
+            pp <- par(c("mfg","mfcol","oma","mar"))
+            if(all(pp$mfg[1:2] == c(1, pp$mfcol[2]))) {
+                outer <- (oma4 <- pp$oma[4]) > 0; mar4 <- pp$mar[4]
+                mtext(sprintf("help(\"%s\")", nameEx()), side = 4,
+                      line = if(outer)max(1, oma4 - 1) else min(1, mar4 - 1),
+               outer = outer, adj = 1, cex = .8, col = "orchid", las=3)
+            }
+        },
+        pos = "CheckExEnv")
> assign("grid_plot_hook",
+        function() {
+            pushViewport(viewport(width=unit(1, "npc") - unit(1, "lines"),
+                                  x=0, just="left"))
+            grid.text(sprintf("help(\"%s\")", nameEx()),
+                      x=unit(1, "npc") + unit(0.5, "lines"),
+                      y=unit(0.8, "npc"), rot=90,
+                      gp=gpar(col="orchid"))
+        },
+        pos = "CheckExEnv")
> setHook("plot.new",     get("base_plot_hook", pos = "CheckExEnv"))
> setHook("persp",        get("base_plot_hook", pos = "CheckExEnv"))
> setHook("grid.newpage", get("grid_plot_hook", pos = "CheckExEnv"))
> assign("cleanEx",
+        function(env = .GlobalEnv) {
+ 	   rm(list = ls(envir = env, all.names = TRUE), envir = env)
+            RNGkind("default", "default")
+ 	   set.seed(1)
+    	   options(warn = 1)
+ 	   .CheckExEnv <- as.environment("CheckExEnv")
+ 	   delayedAssign("T", stop("T used instead of TRUE"),
+ 		  assign.env = .CheckExEnv)
+ 	   delayedAssign("F", stop("F used instead of FALSE"),
+ 		  assign.env = .CheckExEnv)
+ 	   sch <- search()
+ 	   newitems <- sch[! sch %in% .oldSearch]
+ 	   for(item in rev(newitems))
+                eval(substitute(detach(item), list(item=item)))
+ 	   missitems <- .oldSearch[! .oldSearch %in% sch]
+ 	   if(length(missitems))
+ 	       warning("items ", paste(missitems, collapse=", "),
+ 		       " have been removed from the search path")
+        },
+        pos = "CheckExEnv")
> assign("ptime", proc.time(), pos = "CheckExEnv")
> grDevices::postscript("gmvalid-Ex.ps")
> assign("par.postscript", graphics::par(no.readonly = TRUE), pos = "CheckExEnv")
> options(contrasts = c(unordered = "contr.treatment", ordered = "contr.poly"), pager="console")
> options(warn = 1)    
> library('gmvalid')
Loading required package: grid
Loading required package: epitools
Loading required package: mimR
Loading required package: Rgraphviz
Loading required package: graph
Loading required package: rcom
Loading required package: MASS
Loading required package: CoCo
Loading required package: dynamicGraph
Loading required package: ggm

Attaching package: 'ggm'


	The following object(s) are masked from package:mimR :

	 cliques 


	The following object(s) are masked from package:graph :

	 edgeMatrix 

Loading required package: tcltk
Loading Tcl/Tk interface ... done
Loading required package: CoCoObjects
Loading required package: CoCoCore
Loading required package: CoCoRaw
Loading required package: gtools
> 
> assign(".oldSearch", search(), pos = 'CheckExEnv')
> assign(".oldNS", loadedNamespaces(), pos = 'CheckExEnv')
> cleanEx(); nameEx("dp")
> ### * dp
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dp
> ### Title: Death penalty example of Simpson's paradox
> ### Aliases: dp
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(dp)
> ## Graphical model analysis shows that 'defendants' race' is 
> ## independent from 'death penalty' given 'victims' race'.
> gm.analysis(dp,program="coco",recursive=TRUE)

 CoCo     -     A program for estimation, test and model search
 in very large `Co'mplete and `InCo'mplete `Co'ntingency tables.
 1.5.4               Wed Aug 10 14:00:00 CEST 2005
 Compiled with cc, a C compiler for ...           
 Copyright (c) 1991, by Jens Henrik Badsberg      
 Licensed to ...                                  


 Finding all marginals.
  326 cases read.

   Edge        DF   #0  -2log(Q)       P  PowerDiv       P       X^2       P    Models

   [bc]         2    0    7.9102 0.01916    7.1603 0.02787    7.0420 0.02957    [[abc]] / [[ab][ac]]
   [ac]         2    0    1.8819 0.39026    1.5167 0.46844    1.4313 0.48886    [[abc]] / [[ab][bc]]
   [ab]         2    0  131.4582 0.00000  118.7410 0.00000  115.7475 0.00000    [[abc]] / [[ac][bc]]

 Edge selected:     [ac]
 Rejected edges:    []
 Accepted edges:    [[ac]]
 Model:             [[ab][bc]]
 Edges eligible:    [[ab][bc]]

   Edge        DF   #0  -2log(Q)       P  PowerDiv       P       X^2       P    Models

   [ab]         3    0  131.6796 0.00000  118.9261 0.00000  115.9014 0.00000    [[abc]] / [[a][bc]]
   [bc]         3    0    8.1316 0.04337    7.2024 0.06572    6.9773 0.07262    [[abc]] / [[ab][c]]
Warning, ended CoCo-objects: .current.coco.
$strategy
[1] "backwards"

$model
[1] "ab,bc"

$edge.measure
[1] "gamma.cond"

$analysis
  a         b          c
a 0 0.9300762 -0.2076985
b 0 0.0000000  0.5974194
c 0 0.0000000  0.0000000

$`variable names`
     [,1] [,2]             
[1,] "a"  "Defendants.Race"
[2,] "b"  "Victims.Race"   
[3,] "c"  "Death.Penalty"  

> 
> 
> 
> cleanEx(); nameEx("gm.analysis")
> ### * gm.analysis
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gm.analysis
> ### Title: Analyze a data set
> ### Aliases: gm.analysis
> ### Keywords: multivariate nonparametric graphs hplot models
> 
> ### ** Examples
> 
>   data(wam)
>   gm.analysis(wam)
Coherent Backward Selection.
Fixed edges: none.
Critical value:   0.0500
Decomposable mode, Chi-squared tests.
DFs adjusted for sparsity.
Model: abcdef
Deviance:   0.0000 DF:   0 P:  1.0000
    Edge        Test
Excluded   Statistic DF          P
    [ab]     18.5848 16      0.2908
    [ac]     20.6885 16      0.1908
    [ad]     14.1724 16      0.5859
    [ae]     18.7813 16      0.2802
    [af]     11.9511 16      0.7473
    [bc]     26.7393 16      0.0445 + 
    [bd]     34.7333 16      0.0043 + 
    [be]     56.5699 16      0.0000 + 
    [bf]     11.6731 16      0.7662
    [cd]     29.4391 16      0.0211 + 
    [ce]     26.0525 16      0.0533
    [cf]     81.6569 16      0.0000 + 
    [de]     78.2477 16      0.0000 + 
    [df]     46.2210 16      0.0001 + 
    [ef]     17.7282 16      0.3401
Removed edge [bf]
Model: acdef,abcde
Deviance:  11.6731 DF:  16 P:  0.7662
    Edge        Test
Excluded   Statistic DF          P
    [ab]     12.4561  8      0.1320
    [af]      5.8225  8      0.6671
    [ef]     10.8812  8      0.2085
Removed edge [af]
Model: cdef,abcde
Deviance:  17.4955 DF:  24 P:  0.8268
    Edge        Test
Excluded   Statistic DF          P
    [ab]     12.4561  8      0.1320
    [ac]     11.2273  8      0.1891
    [ad]      5.7888  8      0.6709
    [ae]     14.6090  8      0.0672
    [ef]      9.8318  4      0.0434 + 
Removed edge [ad]
Model: cdef,bcde,abce
Deviance:  23.2843 DF:  32 P:  0.8691
    Edge        Test
Excluded   Statistic DF          P
    [ab]     10.6057  4      0.0314 + 
    [ac]     10.4323  4      0.0337 + 
    [ae]     10.4263  4      0.0338 + 
Selected model: cdef,bcde,abce
Test of H0: cdef,bcde,abce
against H:  abcdef
LR:  23.2843    DF:  32    P: 0.8691
$strategy
[1] "backwards"

$model
[1] "cdef,bcde,abce"

$edge.measure
[1] "gamma.cond"

$analysis
  a           b           c            d            e           f
a 0 -0.05485397 -0.04436239  0.050528637  0.003409161 -0.01770452
b 0  0.00000000  0.07185629 -0.292079533 -0.351141331  0.04743012
c 0  0.00000000  0.00000000 -0.000568782  0.234541043 -0.55352956
d 0  0.00000000  0.00000000  0.000000000  0.495578575  0.37428525
e 0  0.00000000  0.00000000  0.000000000  0.000000000  0.08546841
f 0  0.00000000  0.00000000  0.000000000  0.000000000  0.00000000

$`variable names`
     [,1] [,2]     
[1,] "a"  "lecture"
[2,] "b"  "gender" 
[3,] "c"  "school" 
[4,] "d"  "work"   
[5,] "e"  "subject"
[6,] "f"  "plans"  

>   
>   ### showing various options in action
>   gm.analysis(wam,program="c",strategy="f",edge.measure="b",
+     boot.N=50,plot.significant=FALSE,recursive=TRUE,follow=TRUE,decomposable.mode=TRUE)

 CoCo     -     A program for estimation, test and model search
 in very large `Co'mplete and `InCo'mplete `Co'ntingency tables.
 1.5.4               Wed Aug 10 14:00:00 CEST 2005
 Compiled with cc, a C compiler for ...           
 Copyright (c) 1991, by Jens Henrik Badsberg      
 Licensed to ...                                  


 Finding all marginals.
 1190 cases read.
 Decomposable mode set ON

   Edge        DF   #0  -2log(Q)       P  PowerDiv       P       X^2       P    Models

   [ef]         1    0    2.1789 0.13992    2.1941 0.13854    2.2023 0.13780    [[ef]] / [[e][f]]
   [df]         1    0   18.0085 0.00002   18.2734 0.00002   18.4393 0.00002    [[df]] / [[d][f]]
   [de]         1    0   76.5374 0.00000   76.6545 0.00000   76.9038 0.00000    [[de]] / [[d][e]]
   [cf]         1    0   54.3980 0.00000   55.4265 0.00000   56.2352 0.00000    [[cf]] / [[c][f]]
   [ce]         1    0    6.1483 0.01315    6.1165 0.01339    6.1021 0.01350    [[ce]] / [[c][e]]
   [cd]         1    0    0.4419 0.50621    0.4414 0.50646    0.4411 0.50658    [[cd]] / [[c][d]]
   [bf]         1    0    0.6475 0.42101    0.6476 0.42098    0.6476 0.42095    [[bf]] / [[b][f]]
   [be]         1    0   51.6264 0.00000   51.3159 0.00000   51.2388 0.00000    [[be]] / [[b][e]]
   [bd]         1    0   32.2323 0.00000   32.1170 0.00000   32.0896 0.00000    [[bd]] / [[b][d]]
   [bc]         1    0    0.0258 0.87234    0.0258 0.87234    0.0258 0.87234    [[bc]] / [[b][c]]
   [af]         1    0    0.0801 0.77712    0.0801 0.77715    0.0801 0.77716    [[af]] / [[a][f]]
   [ae]         1    0    0.0485 0.82568    0.0485 0.82569    0.0485 0.82569    [[ae]] / [[a][e]]
   [ad]         1    0    0.1927 0.66070    0.1927 0.66069    0.1927 0.66068    [[ad]] / [[a][d]]
   [ac]         1    0    0.0296 0.86330    0.0296 0.86330    0.0296 0.86330    [[ac]] / [[a][c]]
   [ab]         1    0  7.3e-003 0.93175  7.3e-003 0.93175  7.3e-003 0.93175    [[ab]] / [[a][b]]

 Edge selected:     [be]
 Rejected edges:    [[be][cf][bd][de][df][ce]]
 Accepted edges:    []
 Model:             [[bde][ce][a][df][cf]]
 Edges eligible:    [[ab][ac][ad][ae][af][bc][bf][cd][ef]]

   Edge        DF   #0  -2log(Q)       P  PowerDiv       P       X^2       P    Models

   [ab]  [[ab][cf][df][ce][bde]] is not decomposable
   [ac]  [[ac][cf][df][ce][bde]] is not decomposable
   [ad]  [[ad][cf][df][ce][bde]] is not decomposable
   [ae]  [[ae][cf][df][ce][bde]] is not decomposable
   [af]  [[af][cf][df][ce][bde]] is not decomposable
   [bc]  [[bce][cf][df][a][bde]] is not decomposable
   [bf]  [[bdf][cf][a][ce][bde]] is not decomposable
   [cd]         3    0   10.1287 0.01750   10.0318 0.01830    9.9992 0.01857    [[cde][cdf]] / [[cf][df][ce][de]]
   [ef]         3    0    8.3263 0.03973    8.6055 0.03502    8.7635 0.03261    [[def][cef]] / [[cf][df][ce][de]]

 Edge selected:     [cd]
 Rejected edges:    [[cd][ef][be][cf][bd][de][df][ce]]
 Accepted edges:    []
 Model:             [[cdef][a][bde]]
 Edges eligible:    [[bf][bc][af][ae][ad][ac][ab]]

   Edge        DF   #0  -2log(Q)       P  PowerDiv       P       X^2       P    Models

   [bf]         4    0    1.1812 0.88118    1.1792 0.88151    1.1785 0.88163    [[bdef]] / [[bde][def]]
   [bc]         4    0    8.2368 0.08328    8.1973 0.08461    8.1825 0.08512    [[bcde]] / [[bde][cde]]
   [af]         1    0    0.0801 0.77712    0.0801 0.77715    0.0801 0.77716  R [[af]] / [[a][f]]
   [ae]         1    0    0.0485 0.82568    0.0485 0.82569    0.0485 0.82569  R [[ae]] / [[a][e]]
   [ad]         1    0    0.1927 0.66070    0.1927 0.66069    0.1927 0.66068  R [[ad]] / [[a][d]]
   [ac]         1    0    0.0296 0.86330    0.0296 0.86330    0.0296 0.86330  R [[ac]] / [[a][c]]
   [ab]         1    0  7.3e-003 0.93175  7.3e-003 0.93175  7.3e-003 0.93175  R [[ab]] / [[a][b]]
Warning, ended CoCo-objects: .current.coco.

[1] "Run number 1"
[1] "Run number 13"
[1] "Run number 25"
[1] "Run number 37"
[1] "Run number 49"
$strategy
[1] "forwards"

$model
[1] "a,bde,cdef"

$edge.measure
[1] "boot"

$analysis
  a    b    c    d    e    f
a 0 0.02 0.12 0.12 0.00 0.10
b 0 0.00 0.50 1.00 1.00 0.28
c 0 0.00 0.00 0.78 0.82 1.00
d 0 0.00 0.00 0.00 1.00 1.00
e 0 0.00 0.00 0.00 0.00 0.76
f 0 0.00 0.00 0.00 0.00 0.00

$`variable names`
     [,1] [,2]     
[1,] "a"  "lecture"
[2,] "b"  "gender" 
[3,] "c"  "school" 
[4,] "d"  "work"   
[5,] "e"  "subject"
[6,] "f"  "plans"  

>               
>   gm.analysis(wam,edge.measure="p",options="u")
Coherent Backward Selection.
Fixed edges: none.
Critical value:   0.0500
Unrestricted mode, Chi-squared tests.
Model: abcdef
Deviance:   0.0000 DF:   0 P:  1.0000
    Edge        Test
Excluded   Statistic DF          P
    [ab]     18.5848 16      0.2908
    [ac]     20.6885 16      0.1908
    [ad]     14.1724 16      0.5859
    [ae]     18.7813 16      0.2802
    [af]     11.9511 16      0.7473
    [bc]     26.7393 16      0.0445 + 
    [bd]     34.7333 16      0.0043 + 
    [be]     56.5699 16      0.0000 + 
    [bf]     11.6731 16      0.7662
    [cd]     29.4391 16      0.0211 + 
    [ce]     26.0525 16      0.0533
    [cf]     81.6569 16      0.0000 + 
    [de]     78.2477 16      0.0000 + 
    [df]     46.2210 16      0.0001 + 
    [ef]     17.7282 16      0.3401
Removed edge [bf]
Model: acdef,abcde
Deviance:  11.6731 DF:  16 P:  0.7662
    Edge        Test
Excluded   Statistic DF          P
    [ab]     12.4561  8      0.1320
    [ac]     16.3718 12      0.1748
    [ad]     10.0085 12      0.6152
    [ae]     15.6212 12      0.2092
    [af]      5.8225  8      0.6671
    [ce]     21.4213 12      0.0445 + 
    [ef]     10.8812  8      0.2085
Removed edge [af]
Model: cdef,abcde
Deviance:  17.4955 DF:  24 P:  0.8268
    Edge        Test
Excluded   Statistic DF          P
    [ab]     12.4561  8      0.1320
    [ac]     11.2273  8      0.1891
    [ad]      5.7888  8      0.6709
    [ae]     14.6090  8      0.0672
    [ef]      9.8318  4      0.0434 + 
Removed edge [ad]
Model: cdef,bcde,abce
Deviance:  23.2843 DF:  32 P:  0.8691
    Edge        Test
Excluded   Statistic DF          P
    [ab]     10.6057  4      0.0314 + 
    [ac]     10.4323  4      0.0337 + 
    [ae]     10.4263  4      0.0338 + 
Selected model: cdef,bcde,abce
Test of H0: cdef,bcde,abce
against H:  abcdef
LR:  23.2843    DF:  32    P: 0.8691
$strategy
[1] "backwards"

$model
[1] "cdef,bcde,abce"

$edge.measure
[1] "p.value"

$analysis
$analysis$`cdef,bcde,abce`
   a      b      c      d      e      f
a NA 0.0314 0.0337     NA 0.0338     NA
b NA     NA 0.0051 0.0000 0.0000     NA
c NA     NA     NA 0.0036 0.0081 0.0000
d NA     NA     NA     NA 0.0000 0.0000
e NA     NA     NA     NA     NA 0.0434
f NA     NA     NA     NA     NA     NA


$`variable names`
     [,1] [,2]     
[1,] "a"  "lecture"
[2,] "b"  "gender" 
[3,] "c"  "school" 
[4,] "d"  "work"   
[5,] "e"  "subject"
[6,] "f"  "plans"  

> 
> 
> 
> cleanEx(); nameEx("gm.boot.coco")
> ### * gm.boot.coco
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gm.boot.coco
> ### Title: Graphical model validation using the bootstrap (CoCo).
> ### Aliases: gm.boot.coco
> ### Keywords: nonparametric multivariate models
> 
> ### ** Examples
> 
>   ### should provide good results because of simulated data
>   gm <- gm.modelsim(2000,"ABC,CDE")
>   gm.boot.coco(50,gm,recursive=TRUE)

Run number 1
Run number 13
Run number 25
Run number 37
Run number 49

$`bootstrapped models`
  ac,bc,cde     abc,cde    abcd,cde  ace,bc,cde abc,acd,cde       abcde 
       0.46        0.40        0.04        0.02        0.02        0.02 
 ac,bcd,cde    abc,bcde 
       0.02        0.02 

$`bootstrapped subgraphs`
   bc    ac   cde   abc   bcd   acd  abcd   ace  bcde abcde 
 1.00  1.00  1.00  0.50  0.10  0.08  0.06  0.04  0.04  0.02 

$`bootstrapped cliques`
  cde    ac    bc   abc  abcd   ace   acd abcde   bcd  bcde 
 0.96  0.48  0.48  0.44  0.04  0.02  0.02  0.02  0.02  0.02 

$`bootstrapped edges`
  a   b c    d    e
a 0 0.5 1 0.08 0.04
b 0 0.0 1 0.10 0.04
c 0 0.0 0 1.00 1.00
d 0 0.0 0 0.00 1.00
e 0 0.0 0 0.00 0.00

$`original model`
[1] "ac,bc,cde"

$`differences from original data set`
$`differences from original data set`$`more edges`
 0  1  3  2  5 
23 22  3  1  1 

$`differences from original data set`$`less edges`
 0 
50 

$`differences from original data set`$differences
 0  1  3  2  5 
23 22  3  1  1 


$`variable names`
     [,1] [,2]
[1,] "a"  "A" 
[2,] "b"  "B" 
[3,] "c"  "C" 
[4,] "d"  "D" 
[5,] "e"  "E" 

>   
>   ### on real data sets a forward bootstrap seems to have better results
>   data(wynder)
>   gm.boot.coco(100,wynder,strategy="f",calculations=c("s","e"),decomposable.mode=TRUE)

[1] "Run number 1"
[1] "Run number 26"
[1] "Run number 51"
[1] "Run number 76"
$`bootstrapped models`
abc 
  1 

$`bootstrapped subgraphs`
abc 
  1 

$`bootstrapped edges`
  a b c
a 0 1 1
b 0 0 1
c 0 0 0

$`variable names`
     [,1] [,2]     
[1,] "a"  "Alc"    
[2,] "b"  "Smoking"
[3,] "c"  "Group"  

>   
>   ### with a given model
>   data(wam)
>   gm.boot.coco(10,wam,model="ab,bcde,cdef")

Run number 1
Run number 3
Run number 5
Run number 7
Run number 9

$`bootstrapped models`
     a,bcde,cdf     a,bcde,cdef   a,bde,cdf,def a,bce,bde,cf,df      a,bde,cdef 
            0.3             0.2             0.2             0.1             0.1 
      a,bde,cdf 
            0.1 

$`bootstrapped subgraphs`
   a  bde   df   cf  cdf   ce  cde  bce bcde  def cdef 
 1.0  1.0  1.0  1.0  0.9  0.7  0.6  0.6  0.5  0.5  0.3 

$`bootstrapped cliques`
   a  cdf bcde  bde cdef  def  bce   cf   df 
 1.0  0.6  0.5  0.5  0.3  0.2  0.1  0.1  0.1 

$`bootstrapped edges`
  a b   c   d   e   f
a 0 0 0.0 0.0 0.0 0.0
b 0 0 0.6 1.0 1.0 0.0
c 0 0 0.0 0.9 0.7 1.0
d 0 0 0.0 0.0 1.0 1.0
e 0 0 0.0 0.0 0.0 0.5
f 0 0 0.0 0.0 0.0 0.0

$`original model`
[1] "cdf,def,bde,a"

$`differences from original data set`
$`differences from original data set`$`more edges`
2 0 1 
6 3 1 

$`differences from original data set`$`less edges`
0 1 2 
5 4 1 

$`differences from original data set`$differences
3 2 0 1 4 
3 2 2 2 1 


$`variable names`
     [,1] [,2]     
[1,] "a"  "lecture"
[2,] "b"  "gender" 
[3,] "c"  "school" 
[4,] "d"  "work"   
[5,] "e"  "subject"
[6,] "f"  "plans"  

> 
> 
> 
> cleanEx(); nameEx("gm.boot.mim")
> ### * gm.boot.mim
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gm.boot.mim
> ### Title: Graphical model validation using the bootstrap (MIM).
> ### Aliases: gm.boot.mim
> ### Keywords: nonparametric multivariate models
> 
> ### ** Examples
> 
>   ### should provide good results because of simulated data
>   gm.a <- gm.modelsim(2000,"ABC,CDE")
>   gm.boot.mim(50,gm.a)
Run number 1
Run number 13
Run number 25
Run number 37
Run number 49
$`bootstrapped models`
    abc,cde   ac,bc,cde abc,bcd,cde abc,bce,cde abc,ace,cde   abcd,acde 
       0.36        0.18        0.08        0.08        0.06        0.06 
abc,acd,cde    abcd,cde       abcde   abce,bcde  ac,bcd,cde  ace,bc,cde 
       0.06        0.04        0.02        0.02        0.02        0.02 

$`bootstrapped subgraphs`
   bc    ac   cde   abc   bcd   ace   acd  abcd   bce  acde  bcde  abce abcde 
 1.00  1.00  1.00  0.78  0.24  0.18  0.18  0.12  0.12  0.08  0.04  0.04  0.02 

$`bootstrapped cliques`
  cde   abc    ac    bc   bcd  abcd   ace   bce  acde   acd abcde  abce  bcde 
 0.90  0.64  0.20  0.20  0.10  0.10  0.08  0.08  0.06  0.06  0.02  0.02  0.02 

$`bootstrapped edges`
  a    b c    d    e
a 0 0.78 1 0.18 0.18
b 0 0.00 1 0.24 0.12
c 0 0.00 0 1.00 1.00
d 0 0.00 0 0.00 1.00
e 0 0.00 0 0.00 0.00

$`original model`
[1] "cde,abc"

$`differences from original data set`
$`differences from original data set`$`more edges`
 0  1  3  2  4 
27 16  4  2  1 

$`differences from original data set`$`less edges`
 0  1 
39 11 

$`differences from original data set`$differences
 1  0  3  2  4 
23 18  4  4  1 


$`variable names`
     [,1] [,2]
[1,] "a"  "A" 
[2,] "b"  "B" 
[3,] "c"  "C" 
[4,] "d"  "D" 
[5,] "e"  "E" 

>   
>   ### on real data sets a forward bootstrap seems to have better results
>   data(wynder)
>   gm.boot.mim(100,wynder,strategy="f",calculations=c("s","e"),options="u")
[1] "Run number 1"
[1] "Run number 26"
[1] "Run number 51"
[1] "Run number 76"
$`bootstrapped models`
  //abc //ab,ac 
   0.83    0.17 

$`bootstrapped subgraphs`
  //  //a   b, 
1.00 0.83 0.17 

$`bootstrapped edges`
  a b    c
a 0 1 1.00
b 0 0 0.83
c 0 0 0.00

$`variable names`
     [,1] [,2]     
[1,] "a"  "Alc"    
[2,] "b"  "Smoking"
[3,] "c"  "Group"  

>   
>   ### with model given
>   data(wam)
>   gm.boot.mim(10,wam,model="a,bcde,cdef")
Run number 1
Run number 3
Run number 5
Run number 7
Run number 9
$`bootstrapped models`
   a,bcde,cdf   a,bcde,cdef    a,bde,cdef a,bde,cdf,def a,bde,cde,cdf 
          0.4           0.2           0.2           0.1           0.1 

$`bootstrapped subgraphs`
   a  bde  cdf  cde bcde  def cdef 
 1.0  1.0  1.0  0.9  0.6  0.5  0.4 

$`bootstrapped cliques`
   a bcde  cdf cdef  bde  def  cde 
 1.0  0.6  0.6  0.4  0.4  0.1  0.1 

$`bootstrapped edges`
  a b   c d   e   f
a 0 0 0.0 0 0.0 0.0
b 0 0 0.6 1 1.0 0.0
c 0 0 0.0 1 0.9 1.0
d 0 0 0.0 0 1.0 1.0
e 0 0 0.0 0 0.0 0.5
f 0 0 0.0 0 0.0 0.0

$`original model`
[1] "cdef,bcde,abce"

$`differences from original data set`
$`differences from original data set`$`more edges`
 0 
10 

$`differences from original data set`$`less edges`
4 3 5 
6 2 2 

$`differences from original data set`$differences
4 3 5 
6 2 2 


$`variable names`
     [,1] [,2]     
[1,] "a"  "lecture"
[2,] "b"  "gender" 
[3,] "c"  "school" 
[4,] "d"  "work"   
[5,] "e"  "subject"
[6,] "f"  "plans"  

>   
>   ### EH-strategy
>   gm.boot.mim(50,wam,strategy="eh",model="a,bc,de,f - abcde,bcdef")
[1] "Run number 1"
[1] "Run number 13"
[1] "Run number 25"
[1] "Run number 37"
[1] "Run number 49"
$`bootstrapped models`
         abce,bcde,cdef              abce,bcdef              abcde,cdef 
             0.20289855              0.10144928              0.08695652 
         abde,bcde,cdef           abce,bcde,cdf             a,bcde,cdef 
             0.04347826              0.04347826              0.04347826 
            abcde,bcdef           ade,bcde,cdef            ade,bcde,cdf 
             0.04347826              0.02898551              0.02898551 
          ace,bcde,cdef          abce,bde,df,cf           acde,bcde,cdf 
             0.02898551              0.02898551              0.02898551 
                a,bcdef       a,bce,bde,cef,def     ade,bce,bcf,bde,bdf 
             0.02898551              0.01449275              0.01449275 
          abd,bcde,cdef        abde,bcd,cdf,def        abcd,bde,def,cdf 
             0.01449275              0.01449275              0.01449275 
             abcd,bcdef       ace,ade,bcef,bdef     abce,abde,bcef,bdef 
             0.01449275              0.01449275              0.01449275 
         abce,bdef,bcef       abce,abde,cef,def        abce,bde,def,cef 
             0.01449275              0.01449275              0.01449275 
ace,ade,bce,bde,cef,def          a,bce,cf,de,df              abcde,bcdf 
             0.01449275              0.01449275              0.01449275 
           abd,bcde,cdf             a,bcef,bdef     ade,bce,bde,cef,def 
             0.01449275              0.01449275              0.01449275 
           ae,bcde,cdef 
             0.01449275 

$`bootstrapped subgraphs`
       be        bc         a        de        df        cf       bde       bce 
1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 0.9855072 0.9710145 
       ae       bcd       def       cdf      bcde       cef        ac        ab 
0.8260870 0.8115942 0.8115942 0.8115942 0.7826087 0.7826087 0.6956522 0.6956522 
      ace      cdef       abe       abc      abce        ad       ade       abd 
0.6666667 0.6521739 0.6376812 0.6086957 0.5797101 0.4347826 0.3768116 0.2898551 
      bdf       bcf      bdef      bcef      abde      bcdf       acd     bcdef 
0.2753623 0.2753623 0.2463768 0.2463768 0.2318841 0.2028986 0.2028986 0.1884058 
     acde      abcd     abcde 
0.1739130 0.1739130 0.1449275 

$`bootstrapped cliques`
      bcde       cdef       abce      bcdef        cdf      abcde        ade 
0.49275362 0.46376812 0.43478261 0.18840580 0.14492754 0.14492754 0.11594203 
         a        bde        def       abde        bce        cef        ace 
0.11594203 0.11594203 0.10144928 0.08695652 0.07246377 0.07246377 0.05797101 
      bcef       bdef         df         cf        abd       abcd       acde 
0.05797101 0.05797101 0.04347826 0.04347826 0.02898551 0.02898551 0.02898551 
       bcf        bdf        bcd         de       bcdf         ae 
0.01449275 0.01449275 0.01449275 0.01449275 0.01449275 0.01449275 

$`bootstrapped edges`
  a         b         c         d         e         f
a 0 0.6956522 0.6956522 0.4347826 0.8260870 0.0000000
b 0 0.0000000 1.0000000 0.9855072 1.0000000 0.2753623
c 0 0.0000000 0.0000000 0.8115942 0.9710145 1.0000000
d 0 0.0000000 0.0000000 0.0000000 1.0000000 1.0000000
e 0 0.0000000 0.0000000 0.0000000 0.0000000 0.8115942
f 0 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000

$`variable names`
     [,1] [,2]     
[1,] "a"  "lecture"
[2,] "b"  "gender" 
[3,] "c"  "school" 
[4,] "d"  "work"   
[5,] "e"  "subject"
[6,] "f"  "plans"  

> 
> 
> 
> cleanEx(); nameEx("gm.coco")
> ### * gm.coco
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gm.coco
> ### Title: Graphical model selection (CoCo)
> ### Aliases: gm.coco
> ### Keywords: models multivariate
> 
> ### ** Examples
> 
>   data(wam)
>   gm.coco(wam)

 CoCo     -     A program for estimation, test and model search
 in very large `Co'mplete and `InCo'mplete `Co'ntingency tables.
 1.5.4               Wed Aug 10 14:00:00 CEST 2005
 Compiled with cc, a C compiler for ...           
 Copyright (c) 1991, by Jens Henrik Badsberg      
 Licensed to ...                                  


 Finding all marginals.
 1190 cases read.

   Edge        DF   #0  -2log(Q)       P  PowerDiv       P       X^2       P    Models

   [ab]        16    0   18.5848 0.29020   18.3927 0.30084   18.3515 0.30316    [[abcdef]] / [[acdef][bcdef]]
   [ac]        16    0   20.6885 0.19044   20.4751 0.19920   20.4286 0.20114    [[abcdef]] / [[abdef][bcdef]]
   [ad]        16    0   14.1724 0.58634   14.0882 0.59266   14.0632 0.59453    [[abcdef]] / [[abcef][bcdef]]
   [ae]        16    0   18.7813 0.27958   18.6323 0.28761   18.6066 0.28901    [[abcdef]] / [[abcdf][bcdef]]
   [af]        16    0   11.9511 0.74821   11.8496 0.75511   11.8451 0.75541    [[abcdef]] / [[abcde][bcdef]]
   [bc]        16    0   26.7393 0.04416   26.3695 0.04872   26.2710 0.05001    [[abcdef]] / [[abdef][acdef]]
   [bd]        16    0   34.7333 0.00458   34.3905 0.00506   34.3643 0.00510    [[abcdef]] / [[abcef][acdef]]
   [be]        16    0   56.5699 0.00002   55.7005 0.00002   55.6091 0.00002    [[abcdef]] / [[abcdf][acdef]]
   [bf]        16    0   11.6731 0.76694   11.4091 0.78424   11.3456 0.78832    [[abcdef]] / [[abcde][acdef]]
   [cd]        16    0   29.4391 0.02100   28.3661 0.02834   28.0759 0.03071    [[abcdef]] / [[abcef][abdef]]
   [ce]        16    0   26.0525 0.05297   25.3980 0.06280   25.1834 0.06635    [[abcdef]] / [[abcdf][abdef]]
   [cf]        16    0   81.6569 0.00000   81.2703 0.00000   82.5676 0.00000    [[abcdef]] / [[abcde][abdef]]
   [de]        16    0   78.2477 0.00000   79.2366 0.00000   80.2779 0.00000    [[abcdef]] / [[abcdf][abcef]]
   [df]        16    0   46.2210 0.00020   45.8973 0.00022   46.4621 0.00019    [[abcdef]] / [[abcde][abcef]]
   [ef]        16    0   17.7282 0.33961   18.1214 0.31630   18.4347 0.29849    [[abcdef]] / [[abcde][abcdf]]

 Accepted edges:    [[bf][af][ad][ef][ab][ae][ac][ce]]
Warning, ended CoCo-objects: .current.coco.
$accepted
[1] "a,bcd,bde,cdf"

$rejected
NULL

$base
[1] "abcdef"

$strategy
[1] "backwards"

$tests
                          df deviance   p.value
a,bcd,bde,cdf ~ SATURATED 47 51.69079 0.2953007

$`variable names`
     [,1] [,2]     
[1,] "a"  "lecture"
[2,] "b"  "gender" 
[3,] "c"  "school" 
[4,] "d"  "work"   
[5,] "e"  "subject"
[6,] "f"  "plans"  

>   ### giving many options to the strategy
>   gm.coco(wam,recursive=TRUE,follow=TRUE,decomposable.mode=TRUE,
+             coherent=TRUE,IC=TRUE,BIC=TRUE)

 CoCo     -     A program for estimation, test and model search
 in very large `Co'mplete and `InCo'mplete `Co'ntingency tables.
 1.5.4               Wed Aug 10 14:00:00 CEST 2005
 Compiled with cc, a C compiler for ...           
 Copyright (c) 1991, by Jens Henrik Badsberg      
 Licensed to ...                                  


 Finding all marginals.
 1190 cases read.
 Decomposable mode set ON

   Edge        DF   #0  -2log(Q)       P  PowerDiv       P       X^2       P    Models

   [ef]        16    0   17.7282 0.33961   18.1214 0.31630   18.4347 0.29849    [[abcdef]] / [[abcde][abcdf]]
   [df]        16    0   46.2210 0.00020   45.8973 0.00022   46.4621 0.00019    [[abcdef]] / [[abcde][abcef]]
   [de]        16    0   78.2477 0.00000   79.2366 0.00000   80.2779 0.00000    [[abcdef]] / [[abcdf][abcef]]
   [cf]        16    0   81.6569 0.00000   81.2703 0.00000   82.5676 0.00000    [[abcdef]] / [[abcde][abdef]]
   [ce]        16    0   26.0525 0.05297   25.3980 0.06280   25.1834 0.06635    [[abcdef]] / [[abcdf][abdef]]
   [cd]        16    0   29.4391 0.02100   28.3661 0.02834   28.0759 0.03071    [[abcdef]] / [[abcef][abdef]]
   [bf]        16    0   11.6731 0.76694   11.4091 0.78424   11.3456 0.78832    [[abcdef]] / [[abcde][acdef]]
   [be]        16    0   56.5699 0.00002   55.7005 0.00002   55.6091 0.00002    [[abcdef]] / [[abcdf][acdef]]
   [bd]        16    0   34.7333 0.00458   34.3905 0.00506   34.3643 0.00510    [[abcdef]] / [[abcef][acdef]]
   [bc]        16    0   26.7393 0.04416   26.3695 0.04872   26.2710 0.05001    [[abcdef]] / [[abdef][acdef]]
   [af]        16    0   11.9511 0.74821   11.8496 0.75511   11.8451 0.75541    [[abcdef]] / [[abcde][bcdef]]
   [ae]        16    0   18.7813 0.27958   18.6323 0.28761   18.6066 0.28901    [[abcdef]] / [[abcdf][bcdef]]
   [ad]        16    0   14.1724 0.58634   14.0882 0.59266   14.0632 0.59453    [[abcdef]] / [[abcef][bcdef]]
   [ac]        16    0   20.6885 0.19044   20.4751 0.19920   20.4286 0.20114    [[abcdef]] / [[abdef][bcdef]]
   [ab]        16    0   18.5848 0.29020   18.3927 0.30084   18.3515 0.30316    [[abcdef]] / [[acdef][bcdef]]

 Edge selected:     [bf]
 Rejected edges:    [[bc][cd][bd][df][be][de][cf]]
 Accepted edges:    [[bf][af][ad][ef][ab][ae][ac][ce]]
 Model:             [[abcde][acdef]]
 Edges eligible:    [[ab][ac][ad][ae][af][ce][ef]]

   Edge        DF   #0  -2log(Q)       P  PowerDiv       P       X^2       P    Models

   [ab]         8    0   12.4561 0.13139   12.3911 0.13399   12.3729 0.13473    [[abcde]] / [[acde][bcde]]
   [ac]  [[adef][cdef][abde][bcde]] is not decomposable
   [ad]  [[acef][cdef][abce][bcde]] is not decomposable
   [ae]  [[acdf][cdef][abcd][bcde]] is not decomposable
   [af]         8    0    5.8225 0.66890    5.7985 0.67159    5.7931 0.67219    [[acdef]] / [[acde][cdef]]
   [ce]  [[acdf][adef][abcd][abde]] is not decomposable
   [ef]         8    0   10.8812 0.20775   11.1785 0.19106   11.3548 0.18169    [[acdef]] / [[acde][acdf]]

 Edge selected:     [af]
 Rejected edges:    [[bc][cd][bd][df][be][de][cf]]
 Accepted edges:    [[bf][af][ad][ef][ab][ae][ac][ce]]
 Model:             [[abcde][cdef]]
 Edges eligible:    [[ef][ce][ae][ad][ac][ab]]

   Edge        DF   #0  -2log(Q)       P  PowerDiv       P       X^2       P    Models

   [ef]         4    0    9.8318 0.04336   10.0982 0.03881   10.2540 0.03636    [[cdef]] / [[cde][cdf]]
   [ce]  [[cdf][def][abcd][abde]] is not decomposable
   [ae]         8    0   14.6090 0.06667   14.5486 0.06800   14.5342 0.06832    [[abcde]] / [[abcd][bcde]]
   [ad]         8    0    5.7888 0.67268    5.7827 0.67336    5.7823 0.67341    [[abcde]] / [[abce][bcde]]
   [ac]         8    0   11.2273 0.18842   11.1935 0.19024   11.1845 0.19073    [[abcde]] / [[abde][bcde]]
   [ab]         8    0   12.4561 0.13139   12.3911 0.13399   12.3729 0.13473  R [[abcde]] / [[acde][bcde]]

 Edge selected:     [ad]
 Rejected edges:    [[ef][bc][cd][bd][df][be][de][cf]]
 Accepted edges:    [[bf][af][ad][ef][ab][ae][ac][ce]]
 Model:             [[abce][bcde][cdef]]
 Edges eligible:    [[ab][ac][ae][ce]]

   Edge        DF   #0  -2log(Q)       P  PowerDiv       P       X^2       P    Models

   [ab]         4    0   10.6057 0.03137   10.5690 0.03186   10.5574 0.03202    [[abce]] / [[ace][bce]]
   [ac]         4    0   10.4323 0.03374   10.4064 0.03411   10.3975 0.03424    [[abce]] / [[abe][bce]]
   [ae]         4    0   10.4263 0.03383   10.3922 0.03432   10.3826 0.03445    [[abce]] / [[abc][bce]]
   [ce]  [[cdf][def][bcd][bde][abc][abe]] is not decomposable
Warning, ended CoCo-objects: .current.coco.
$accepted
[1] "abce,bcde,cdef"

$rejected
[1] "abcde,acdef" "abcde,cdef" 

$base
[1] "abcdef"

$strategy
[1] "backwards"

$tests
                             df  deviance   p.value
abce,bcde,cdef ~ abcde,acdef 16 11.611271 0.7710358
abce,bcde,cdef ~ abcde,cdef   8  5.788786 0.6726798

$`variable names`
     [,1] [,2]     
[1,] "a"  "lecture"
[2,] "b"  "gender" 
[3,] "c"  "school" 
[4,] "d"  "work"   
[5,] "e"  "subject"
[6,] "f"  "plans"  

>   
>   ### giving base
>   gm.coco(wam,strategy="e",model=c("ab,cd","ae,be"))

 CoCo     -     A program for estimation, test and model search
 in very large `Co'mplete and `InCo'mplete `Co'ntingency tables.
 1.5.4               Wed Aug 10 14:00:00 CEST 2005
 Compiled with cc, a C compiler for ...           
 Copyright (c) 1991, by Jens Henrik Badsberg      
 Licensed to ...                                  


 Finding all marginals.
 1190 cases read.
 Fix In:      [[cd][ab]]
 Fix Out:     [[abcdef]]
 Fix In:      [[cd][ab]]

 FixIn not sub GC of BaseModel.
 Base Model:  [[be][ae]]
 Fix Out:     [[ab]]
 Fix In:      [[a][b]]
 Base model read 1)  D<A>(R)\A: 

     [[f][e][d][b][ac]]
     [[f][e][c][b][ad]]
     [[f][d][c][b][ae]]
     [[e][d][c][b][af]]
     [[f][e][d][bc][a]]
     [[f][e][c][bd][a]]
     [[f][d][c][be][a]]
     [[e][d][c][bf][a]]
     [[f][e][cd][b][a]]
     [[f][d][ce][b][a]]
     [[e][d][cf][b][a]]
     [[f][de][c][b][a]]
     [[e][df][c][b][a]]
     [[ef][d][c][b][a]]

 2)  D<R>(A)\R: 

     [[bcdef][acdef]]



               DF   #0  -2log(Q)       P  PowerDiv       P       X^2       P            Model 

        Vertexes of [[bcdef][acdef]] not subset of edges of [[be][ae]]

                0    0    0.0000 1.00000    0.0000 1.00000    0.0000 1.00000  Accepted GD [[acdef][bcdef]]

    Accepted:    1
    Rejected:    0

 Accepted:

     [[acdef][bcdef]]

 Rejected:

     [[f][e][d][c][b][a]]


 1)  D<A>(R)\A: 

     [[f][e][d][b][ac]]
     [[f][e][c][b][ad]]
     [[f][d][c][b][ae]]
     [[e][d][c][b][af]]
     [[f][e][d][bc][a]]
     [[f][e][c][bd][a]]
     [[f][d][c][be][a]]
     [[e][d][c][bf][a]]
     [[f][e][cd][b][a]]
     [[f][d][ce][b][a]]
     [[e][d][cf][b][a]]
     [[f][de][c][b][a]]
     [[e][df][c][b][a]]
     [[ef][d][c][b][a]]

 2)  D<R>(A)\R: 

     [[bcdef][adef]]
     [[bcdef][acef]]
     [[bcdef][acdf]]
     [[bcdef][acde]]
     [[bdef][acdef]]
     [[bcef][acdef]]
     [[bcdf][acdef]]
     [[bcde][acdef]]
     [[bdef][bcef][adef][acef]]
     [[bdef][bcdf][adef][acdf]]
     [[bdef][bcde][adef][acde]]
     [[bcef][bcdf][acef][acdf]]
     [[bcef][bcde][acef][acde]]
     [[bcdf][bcde][acdf][acde]]



               DF   #0  -2log(Q)       P  PowerDiv       P       X^2       P            Model 

        Vertexes of [[bcdef][adef]] not subset of edges of [[be][ae]]

                0    0    0.0000 1.00000    0.0000 1.00000    0.0000 1.00000  Accepted GD [[adef][bcdef]]
        Vertexes of [[bcdef][acef]] not subset of edges of [[be][ae]]

                0    0    0.0000 1.00000    0.0000 1.00000    0.0000 1.00000  Accepted GD [[acef][bcdef]]
        Vertexes of [[bcdef][acdf]] not subset of edges of [[be][ae]]

                0    0    0.0000 1.00000    0.0000 1.00000    0.0000 1.00000  Accepted GD [[acdf][bcdef]]
        Vertexes of [[bcdef][acde]] not subset of edges of [[be][ae]]

                0    0    0.0000 1.00000    0.0000 1.00000    0.0000 1.00000  Accepted GD [[acde][bcdef]]
        Vertexes of [[bdef][acdef]] not subset of edges of [[be][ae]]

                0    0    0.0000 1.00000    0.0000 1.00000    0.0000 1.00000  Accepted GD [[acdef][bdef]]
        Vertexes of [[bcef][acdef]] not subset of edges of [[be][ae]]

                0    0    0.0000 1.00000    0.0000 1.00000    0.0000 1.00000  Accepted GD [[acdef][bcef]]
        Vertexes of [[bcdf][acdef]] not subset of edges of [[be][ae]]

                0    0    0.0000 1.00000    0.0000 1.00000    0.0000 1.00000  Accepted GD [[acdef][bcdf]]
        Vertexes of [[bcde][acdef]] not subset of edges of [[be][ae]]

                0    0    0.0000 1.00000    0.0000 1.00000    0.0000 1.00000  Accepted GD [[acdef][bcde]]
        Vertexes of [[bdef][bcef][adef][acef]] not subset of edges of [[be][ae]]

                0    0    0.0000 1.00000    0.0000 1.00000    0.0000 1.00000  Accepted G  [[acef][adef][bcef][bdef]]
        Vertexes of [[bdef][bcdf][adef][acdf]] not subset of edges of [[be][ae]]

                0    0    0.0000 1.00000    0.0000 1.00000    0.0000 1.00000  Accepted G  [[acdf][adef][bcdf][bdef]]
        Vertexes of [[bdef][bcde][adef][acde]] not subset of edges of [[be][ae]]

                0    0    0.0000 1.00000    0.0000 1.00000    0.0000 1.00000  Accepted G  [[acde][adef][bcde][bdef]]
        Vertexes of [[bcef][bcdf][acef][acdf]] not subset of edges of [[be][ae]]

                0    0    0.0000 1.00000    0.0000 1.00000    0.0000 1.00000  Accepted G  [[acdf][acef][bcdf][bcef]]
        Vertexes of [[bcef][bcde][acef][acde]] not subset of edges of [[be][ae]]

                0    0    0.0000 1.00000    0.0000 1.00000    0.0000 1.00000  Accepted G  [[acde][acef][bcde][bcef]]
        Vertexes of [[bcdf][bcde][acdf][acde]] not subset of edges of [[be][ae]]

                0    0    0.0000 1.00000    0.0000 1.00000    0.0000 1.00000  Accepted G  [[acde][acdf][bcde][bcdf]]

    Accepted:   14
    Rejected:    0

 Accepted:

     [[acde][acdf][bcde][bcdf]]
     [[acde][acef][bcde][bcef]]
     [[acdf][acef][bcdf][bcef]]
     [[acde][adef][bcde][bdef]]
     [[acdf][adef][bcdf][bdef]]
     [[acef][adef][bcef][bdef]]
     [[acdef][bcde]]
     [[acdef][bcdf]]
     [[acdef][bcef]]
     [[acdef][bdef]]
     [[acde][bcdef]]
     [[acdf][bcdef]]
     [[acef][bcdef]]
     [[adef][bcdef]]

 Rejected:

     [[f][e][d][c][b][a]]


 1)  D<A>(R)\A: 

     [[f][e][d][b][ac]]
     [[f][e][c][b][ad]]
     [[f][d][c][b][ae]]
     [[e][d][c][b][af]]
     [[f][e][d][bc][a]]
     [[f][e][c][bd][a]]
     [[f][d][c][be][a]]
     [[e][d][c][bf][a]]
     [[f][e][cd][b][a]]
     [[f][d][ce][b][a]]
     [[e][d][cf][b][a]]
     [[f][de][c][b][a]]
     [[e][df][c][b][a]]
     [[ef][d][c][b][a]]

 2)  D<R>(A)\R: 

     [[bcf][bcde][acf][acde]]
     [[bce][bcdf][ace][acdf]]
     [[bcef][bcd][acef][acd]]
     [[bef][bdf][bce][bcd][aef][adf][ace][acd]]
     [[bef][bcde][aef][acde]]
     [[bdf][bcde][adf][acde]]
     [[bde][bcdf][ade][acdf]]
     [[bef][bde][bcf][bcd][aef][ade][acf][acd]]
     [[bef][bcdf][aef][acdf]]
     [[bdef][bcd][adef][acd]]
     [[bdef][bcf][adef][acf]]
     [[bdef][bce][adef][ace]]
     [[bdf][bcef][adf][acef]]
     [[bde][bcef][ade][acef]]
     [[bdf][bde][bcf][bce][adf][ade][acf][ace]]
     [[bcde][acdf][acde]]
     [[bcde][acef][acde]]
     [[bce][bcd][acef][acdf]]
     [[bcde][adef][acde]]
     [[bde][bcd][adef][acdf]]
     [[bde][bce][adef][acef]]
     [[bcd][acdef]]
     [[bdf][bcf][adef][acef]]
     [[bcdf][adef][acdf]]
     [[bdf][bcd][adef][acde]]
     [[bcdf][acef][acdf]]
     [[bcf][bcd][acef][acde]]
     [[bcdf][acdf][acde]]
     [[bcf][bce][acdf][acde]]
     [[bcef][acef][acde]]
     [[bcef][acef][acdf]]
     [[bef][bce][adef][acde]]
     [[bef][bcf][adef][acdf]]
     [[bcef][adef][acef]]
     [[bce][acdef]]
     [[bcf][acdef]]
     [[bef][acdef]]
     [[bdf][acdef]]
     [[bde][acdef]]
     [[bdef][adef][acef]]
     [[bdef][adef][acdf]]
     [[bdef][adef][acde]]
     [[bef][bdf][acef][acdf]]
     [[bef][bde][acef][acde]]
     [[bdf][bde][acdf][acde]]
     [[bcdf][bcde][acde]]
     [[bcef][bcde][acde]]
     [[bcef][bcdf][ace][acd]]
     [[bdef][bcde][acde]]
     [[bdef][bcdf][ade][acd]]
     [[bdef][bcef][ade][ace]]
     [[cdef][bcde][acde]]
     [[cdef][bcdf][acde]]
     [[cdef][bcef][acde]]
     [[cdef][bdef][acde]]
     [[bcdef][acd]]
     [[cdef][bdef][acdf]]
     [[cdef][bcef][acdf]]
     [[cdef][bcdf][acdf]]
     [[cdef][bcde][acdf]]
     [[bdef][bcef][adf][acf]]
     [[bdef][bcdf][acdf]]
     [[bdef][bcde][adf][acd]]
     [[bcef][bcdf][acdf]]
     [[bcef][bcde][acf][acd]]
     [[bcdf][bcde][acdf]]
     [[bcdf][bcde][acf][ace]]
     [[bcef][bcde][acef]]
     [[bcef][bcdf][acef]]
     [[bdef][bcde][aef][ace]]
     [[bdef][bcdf][aef][acf]]
     [[bdef][bcef][acef]]
     [[cdef][bcde][acef]]
     [[cdef][bcdf][acef]]
     [[cdef][bcef][acef]]
     [[cdef][bdef][acef]]
     [[bcdef][ace]]
     [[bcdef][acf]]
     [[bcdef][aef]]
     [[bcdef][adf]]
     [[bcdef][ade]]
     [[cdef][bdef][adef]]
     [[cdef][bcef][adef]]
     [[cdef][bcdf][adef]]
     [[cdef][bcde][adef]]
     [[bdef][bcef][adef]]
     [[bdef][bcdf][adef]]
     [[bdef][bcde][adef]]
     [[bcef][bcdf][aef][adf]]
     [[bcef][bcde][aef][ade]]
     [[bcdf][bcde][adf][ade]]



               DF   #0  -2log(Q)       P  PowerDiv       P       X^2       P            Model 

        Vertexes of [[f][e][d][b][ac]] not subset of edges of [[be][ae]]

                0    0    0.0000 1.00000    0.0000 1.00000    0.0000 1.00000  Accepted GD [[ac][b][d][e][f]]
        Vertexes of [[f][e][c][b][ad]] not subset of edges of [[be][ae]]

                0    0    0.0000 1.00000    0.0000 1.00000    0.0000 1.00000  Accepted GD [[ad][b][c][e][f]]
        Vertexes of [[f][d][c][b][ae]] not subset of edges of [[be][ae]]

                0    0    0.0000 1.00000    0.0000 1.00000    0.0000 1.00000  Accepted GD [[ae][b][c][d][f]]
        Vertexes of [[e][d][c][b][af]] not subset of edges of [[be][ae]]

                0    0    0.0000 1.00000    0.0000 1.00000    0.0000 1.00000  Accepted GD [[af][b][c][d][e]]
        Vertexes of [[f][e][d][bc][a]] not subset of edges of [[be][ae]]

                0    0    0.0000 1.00000    0.0000 1.00000    0.0000 1.00000  Accepted GD [[a][bc][d][e][f]]
        Vertexes of [[f][e][c][bd][a]] not subset of edges of [[be][ae]]

                0    0    0.0000 1.00000    0.0000 1.00000    0.0000 1.00000  Accepted GD [[a][bd][c][e][f]]
        Vertexes of [[f][d][c][be][a]] not subset of edges of [[be][ae]]

                0    0    0.0000 1.00000    0.0000 1.00000    0.0000 1.00000  Accepted GD [[a][be][c][d][f]]
        Vertexes of [[e][d][c][bf][a]] not subset of edges of [[be][ae]]

                0    0    0.0000 1.00000    0.0000 1.00000    0.0000 1.00000  Accepted GD [[a][bf][c][d][e]]
        Vertexes of [[f][e][cd][b][a]] not subset of edges of [[be][ae]]

                0    0    0.0000 1.00000    0.0000 1.00000    0.0000 1.00000  Accepted GD [[a][b][cd][e][f]]
        Vertexes of [[f][d][ce][b][a]] not subset of edges of [[be][ae]]

                0    0    0.0000 1.00000    0.0000 1.00000    0.0000 1.00000  Accepted GD [[a][b][ce][d][f]]
        Vertexes of [[e][d][cf][b][a]] not subset of edges of [[be][ae]]

                0    0    0.0000 1.00000    0.0000 1.00000    0.0000 1.00000  Accepted GD [[a][b][cf][d][e]]
        Vertexes of [[f][de][c][b][a]] not subset of edges of [[be][ae]]

                0    0    0.0000 1.00000    0.0000 1.00000    0.0000 1.00000  Accepted GD [[a][b][c][de][f]]
        Vertexes of [[e][df][c][b][a]] not subset of edges of [[be][ae]]

                0    0    0.0000 1.00000    0.0000 1.00000    0.0000 1.00000  Accepted GD [[a][b][c][df][e]]
        Vertexes of [[ef][d][c][b][a]] not subset of edges of [[be][ae]]

                0    0    0.0000 1.00000    0.0000 1.00000    0.0000 1.00000  Accepted GD [[a][b][c][d][ef]]

    Accepted:   14
    Rejected:    0

 Accepted:

     [[a][b][c][d][ef]]
     [[a][b][c][df][e]]
     [[a][b][c][de][f]]
     [[a][b][cf][d][e]]
     [[a][b][ce][d][f]]
     [[a][b][cd][e][f]]
     [[a][bf][c][d][e]]
     [[a][be][c][d][f]]
     [[a][bd][c][e][f]]
     [[a][bc][d][e][f]]
     [[af][b][c][d][e]]
     [[ae][b][c][d][f]]
     [[ad][b][c][e][f]]
     [[ac][b][d][e][f]]

 Rejected:

     [[f][e][d][c][b][a]]


Warning, ended CoCo-objects: .current.coco.
$accepted
 [1] "ae,be"      "a,b,c,d,ef" "a,b,c,df,e" "a,b,c,de,f" "a,b,cf,d,e"
 [6] "a,b,ce,d,f" "a,b,cd,e,f" "a,bf,c,d,e" "a,be,c,d,f" "a,bd,c,e,f"
[11] "a,bc,d,e,f" "af,b,c,d,e" "ae,b,c,d,f" "ad,b,c,e,f" "ac,b,d,e,f"

$rejected
 [1] "a,b,c,d,ef"  "a,b,c,df,e"  "a,b,c,de,f"  "a,b,cf,d,e"  "a,b,ce,d,f" 
 [6] "a,b,cd,e,f"  "a,bf,c,d,e"  "a,be,c,d,f"  "a,bd,c,e,f"  "a,bc,d,e,f" 
[11] "af,b,c,d,e"  "ae,b,c,d,f"  "ad,b,c,e,f"  "ac,b,d,e,f"  "a,b,c,d,e,f"

$base
[1] "ae,be"

$strategy
[1] "eh"

$tests
                         df    deviance      p.value
a,b,c,d,ef ~ a,b,c,d,ef   0  0.00000000 1.000000e+00
a,b,c,d,ef ~ a,b,c,d,e,f  1  2.17888159 1.399162e-01
a,b,c,df,e ~ a,b,c,df,e   0  0.00000000 1.000000e+00
a,b,c,df,e ~ a,b,c,d,e,f  1 18.00847834 2.216055e-05
a,b,c,de,f ~ a,b,c,de,f   0  0.00000000 1.000000e+00
a,b,c,de,f ~ a,b,c,d,e,f  1 76.53743844 1.032324e-06
a,b,cf,d,e ~ a,b,cf,d,e   0  0.00000000 1.000000e+00
a,b,cf,d,e ~ a,b,c,d,e,f  1 54.39795761 6.048151e-07
a,b,ce,d,f ~ a,b,ce,d,f   0  0.00000000 1.000000e+00
a,b,ce,d,f ~ a,b,c,d,e,f  1  6.14826335 1.315419e-02
a,b,cd,e,f ~ a,b,cd,e,f   0  0.00000000 1.000000e+00
a,b,cd,e,f ~ a,b,c,d,e,f  1  0.44189335 5.062100e-01
a,bf,c,d,e ~ a,bf,c,d,e   0  0.00000000 1.000000e+00
a,bf,c,d,e ~ a,b,c,d,e,f  1  0.64750348 4.210067e-01
a,be,c,d,f ~ a,be,c,d,f   0  0.00000000 1.000000e+00
a,be,c,d,f ~ a,b,c,d,e,f  1 51.62639574 5.841927e-07
a,bd,c,e,f ~ a,bd,c,e,f   0  0.00000000 1.000000e+00
a,bd,c,e,f ~ a,b,c,d,e,f  1 32.23225802 6.338113e-07
a,bc,d,e,f ~ a,bc,d,e,f   0  0.00000000 1.000000e+00
a,bc,d,e,f ~ a,b,c,d,e,f  1  0.02582017 8.723403e-01
af,b,c,d,e ~ af,b,c,d,e   0  0.00000000 1.000000e+00
af,b,c,d,e ~ a,b,c,d,e,f  1  0.08013234 7.771182e-01
ae,b,c,d,f ~ ae,b,c,d,f   0  0.00000000 1.000000e+00
ae,b,c,d,f ~ a,b,c,d,e,f  1  0.04850649 8.256828e-01
ad,b,c,e,f ~ ad,b,c,e,f   0  0.00000000 1.000000e+00
ad,b,c,e,f ~ a,b,c,d,e,f  1  0.19267267 6.607014e-01
ac,b,d,e,f ~ ac,b,d,e,f   0  0.00000000 1.000000e+00
ac,b,d,e,f ~ a,b,c,d,e,f  1  0.02964384 8.633009e-01
29                        0  0.00000000 0.000000e+00
30                        0  0.00000000 0.000000e+00
31                        0  0.00000000 0.000000e+00
32                        0  0.00000000 0.000000e+00
33                        0  0.00000000 0.000000e+00
34                        0  0.00000000 0.000000e+00
35                        0  0.00000000 0.000000e+00
36                        0  0.00000000 0.000000e+00
37                        0  0.00000000 0.000000e+00
38                        0  0.00000000 0.000000e+00
39                        0  0.00000000 0.000000e+00
40                        0  0.00000000 0.000000e+00
41                        0  0.00000000 0.000000e+00
42                        0  0.00000000 0.000000e+00
43                        0  0.00000000 0.000000e+00
44                        0  0.00000000 0.000000e+00
45                        0  0.00000000 0.000000e+00
46                        0  0.00000000 0.000000e+00
47                        0  0.00000000 0.000000e+00
48                        0  0.00000000 0.000000e+00
49                        0  0.00000000 0.000000e+00
50                        0  0.00000000 0.000000e+00
51                        0  0.00000000 0.000000e+00
52                        0  0.00000000 0.000000e+00
53                        0  0.00000000 0.000000e+00
54                        0  0.00000000 0.000000e+00
55                        0  0.00000000 0.000000e+00
56                        0  0.00000000 0.000000e+00
57                        0  0.00000000 0.000000e+00
58                        0  0.00000000 0.000000e+00
59                        0  0.00000000 0.000000e+00
60                        0  0.00000000 0.000000e+00
61                        0  0.00000000 0.000000e+00
62                        0  0.00000000 0.000000e+00
63                        0  0.00000000 0.000000e+00
64                        0  0.00000000 0.000000e+00
65                        0  0.00000000 0.000000e+00
66                        0  0.00000000 0.000000e+00
67                        0  0.00000000 0.000000e+00
68                        0  0.00000000 0.000000e+00
69                        0  0.00000000 0.000000e+00
70                        0  0.00000000 0.000000e+00
71                        0  0.00000000 0.000000e+00
72                        0  0.00000000 0.000000e+00
73                        0  0.00000000 0.000000e+00
74                        0  0.00000000 0.000000e+00
75                        0  0.00000000 0.000000e+00
76                        0  0.00000000 0.000000e+00
77                        0  0.00000000 0.000000e+00
78                        0  0.00000000 0.000000e+00
79                        0  0.00000000 0.000000e+00
80                        0  0.00000000 0.000000e+00
81                        0  0.00000000 0.000000e+00
82                        0  0.00000000 0.000000e+00
83                        0  0.00000000 0.000000e+00
84                        0  0.00000000 0.000000e+00
85                        0  0.00000000 0.000000e+00
86                        0  0.00000000 0.000000e+00
87                        0  0.00000000 0.000000e+00
88                        0  0.00000000 0.000000e+00
89                        0  0.00000000 0.000000e+00
90                        0  0.00000000 0.000000e+00
91                        0  0.00000000 0.000000e+00
92                        0  0.00000000 0.000000e+00
93                        0  0.00000000 0.000000e+00
94                        0  0.00000000 0.000000e+00
95                        0  0.00000000 0.000000e+00
96                        0  0.00000000 0.000000e+00
97                        0  0.00000000 0.000000e+00
98                        0  0.00000000 0.000000e+00
99                        0  0.00000000 0.000000e+00
100                       0  0.00000000 0.000000e+00
101                       0  0.00000000 0.000000e+00
102                       0  0.00000000 0.000000e+00
103                       0  0.00000000 0.000000e+00
104                       0  0.00000000 0.000000e+00
105                       0  0.00000000 0.000000e+00
106                       0  0.00000000 0.000000e+00
107                       0  0.00000000 0.000000e+00
108                       0  0.00000000 0.000000e+00
109                       0  0.00000000 0.000000e+00
110                       0  0.00000000 0.000000e+00
111                       0  0.00000000 0.000000e+00
112                       0  0.00000000 0.000000e+00
113                       0  0.00000000 0.000000e+00
114                       0  0.00000000 0.000000e+00
115                       0  0.00000000 0.000000e+00
116                       0  0.00000000 0.000000e+00
117                       0  0.00000000 0.000000e+00
118                       0  0.00000000 0.000000e+00
119                       0  0.00000000 0.000000e+00
120                       0  0.00000000 0.000000e+00
121                       0  0.00000000 0.000000e+00
122                       0  0.00000000 0.000000e+00
123                       0  0.00000000 0.000000e+00
124                       0  0.00000000 0.000000e+00
125                       0  0.00000000 0.000000e+00
126                       0  0.00000000 0.000000e+00
127                       0  0.00000000 0.000000e+00
128                       0  0.00000000 0.000000e+00
129                       0  0.00000000 0.000000e+00
130                       0  0.00000000 0.000000e+00
131                       0  0.00000000 0.000000e+00
132                       0  0.00000000 0.000000e+00
133                       0  0.00000000 0.000000e+00
134                       0  0.00000000 0.000000e+00
135                       0  0.00000000 0.000000e+00
136                       0  0.00000000 0.000000e+00
137                       0  0.00000000 0.000000e+00
138                       0  0.00000000 0.000000e+00
139                       0  0.00000000 0.000000e+00
140                       0  0.00000000 0.000000e+00
141                       0  0.00000000 0.000000e+00
142                       0  0.00000000 0.000000e+00
143                       0  0.00000000 0.000000e+00
144                       0  0.00000000 0.000000e+00
145                       0  0.00000000 0.000000e+00
146                       0  0.00000000 0.000000e+00
147                       0  0.00000000 0.000000e+00
148                       0  0.00000000 0.000000e+00
149                       0  0.00000000 0.000000e+00
150                       0  0.00000000 0.000000e+00
151                       0  0.00000000 0.000000e+00
152                       0  0.00000000 0.000000e+00
153                       0  0.00000000 0.000000e+00
154                       0  0.00000000 0.000000e+00
155                       0  0.00000000 0.000000e+00
156                       0  0.00000000 0.000000e+00
157                       0  0.00000000 0.000000e+00
158                       0  0.00000000 0.000000e+00
159                       0  0.00000000 0.000000e+00
160                       0  0.00000000 0.000000e+00
161                       0  0.00000000 0.000000e+00
162                       0  0.00000000 0.000000e+00
163                       0  0.00000000 0.000000e+00
164                       0  0.00000000 0.000000e+00
165                       0  0.00000000 0.000000e+00
166                       0  0.00000000 0.000000e+00
167                       0  0.00000000 0.000000e+00
168                       0  0.00000000 0.000000e+00
169                       0  0.00000000 0.000000e+00
170                       0  0.00000000 0.000000e+00
171                       0  0.00000000 0.000000e+00
172                       0  0.00000000 0.000000e+00
173                       0  0.00000000 0.000000e+00
174                       0  0.00000000 0.000000e+00
175                       0  0.00000000 0.000000e+00
176                       0  0.00000000 0.000000e+00
177                       0  0.00000000 0.000000e+00
178                       0  0.00000000 0.000000e+00
179                       0  0.00000000 0.000000e+00
180                       0  0.00000000 0.000000e+00
181                       0  0.00000000 0.000000e+00
182                       0  0.00000000 0.000000e+00
183                       0  0.00000000 0.000000e+00
184                       0  0.00000000 0.000000e+00
185                       0  0.00000000 0.000000e+00
186                       0  0.00000000 0.000000e+00
187                       0  0.00000000 0.000000e+00
188                       0  0.00000000 0.000000e+00
189                       0  0.00000000 0.000000e+00
190                       0  0.00000000 0.000000e+00
191                       0  0.00000000 0.000000e+00
192                       0  0.00000000 0.000000e+00
193                       0  0.00000000 0.000000e+00
194                       0  0.00000000 0.000000e+00
195                       0  0.00000000 0.000000e+00
196                       0  0.00000000 0.000000e+00
197                       0  0.00000000 0.000000e+00
198                       0  0.00000000 0.000000e+00
199                       0  0.00000000 0.000000e+00
200                       0  0.00000000 0.000000e+00
201                       0  0.00000000 0.000000e+00
202                       0  0.00000000 0.000000e+00
203                       0  0.00000000 0.000000e+00
204                       0  0.00000000 0.000000e+00
205                       0  0.00000000 0.000000e+00
206                       0  0.00000000 0.000000e+00
207                       0  0.00000000 0.000000e+00
208                       0  0.00000000 0.000000e+00
209                       0  0.00000000 0.000000e+00
210                       0  0.00000000 0.000000e+00
211                       0  0.00000000 0.000000e+00
212                       0  0.00000000 0.000000e+00
213                       0  0.00000000 0.000000e+00
214                       0  0.00000000 0.000000e+00
215                       0  0.00000000 0.000000e+00
216                       0  0.00000000 0.000000e+00
217                       0  0.00000000 0.000000e+00
218                       0  0.00000000 0.000000e+00
219                       0  0.00000000 0.000000e+00
220                       0  0.00000000 0.000000e+00
221                       0  0.00000000 0.000000e+00
222                       0  0.00000000 0.000000e+00
223                       0  0.00000000 0.000000e+00
224                       0  0.00000000 0.000000e+00
225                       0  0.00000000 0.000000e+00

$`variable names`
     [,1] [,2]     
[1,] "a"  "lecture"
[2,] "b"  "gender" 
[3,] "c"  "school" 
[4,] "d"  "work"   
[5,] "e"  "subject"
[6,] "f"  "plans"  

>   gm.coco(wam,strategy="f",model="abc,cd,de,f")

 CoCo     -     A program for estimation, test and model search
 in very large `Co'mplete and `InCo'mplete `Co'ntingency tables.
 1.5.4               Wed Aug 10 14:00:00 CEST 2005
 Compiled with cc, a C compiler for ...           
 Copyright (c) 1991, by Jens Henrik Badsberg      
 Licensed to ...                                  


 Finding all marginals.
 1190 cases read.

   Edge        DF   #0  -2log(Q)       P  PowerDiv       P       X^2       P    Models

   [ad]         2    0    0.3183 0.85289    0.3183 0.85287    0.3183 0.85286    [[acd]] / [[ac][cd]]
   [ae]         1    0    0.0482 0.82618    0.0482 0.82626    0.0481 0.82634    [[de][cd][ac][ae]] / [[ac][cd][de]]
   [af]         1    0    0.0801 0.77712    0.0801 0.77715    0.0801 0.77716    [[af]] / [[a][f]]
   [bd]         2    0   38.7790 0.00000   38.5360 0.00000   38.4763 0.00000    [[bcd]] / [[bc][cd]]
   [be]         1    0   51.6391 0.00000   51.3285 0.00000   51.2515 0.00000    [[de][cd][bc][be]] / [[bc][cd][de]]
   [bf]         1    0    0.6475 0.42101    0.6476 0.42098    0.6476 0.42095    [[bf]] / [[b][f]]
   [ce]         2    0    6.0632 0.04824    6.0520 0.04851    6.0482 0.04860    [[cde]] / [[cd][de]]
   [cf]         1    0   54.3980 0.00000   55.4265 0.00000   56.2352 0.00000    [[cf]] / [[c][f]]
   [df]         1    0   18.0085 0.00002   18.2734 0.00002   18.4393 0.00002    [[df]] / [[d][f]]
   [ef]         1    0    2.1789 0.13992    2.1941 0.13854    2.2023 0.13780    [[ef]] / [[e][f]]

 Rejected edges:    [[bd][be][cf][df][ce]]
Warning, ended CoCo-objects: .current.coco.
$accepted
[1] "abc,bcde,cdf"

$rejected
NULL

$base
[1] "abc,cd,de,f"

$strategy
[1] "forwards"

$tests
                         df deviance   p.value
abc,bcde,cdf ~ SATURATED 40 43.54234 0.3227326

$`variable names`
     [,1] [,2]     
[1,] "a"  "lecture"
[2,] "b"  "gender" 
[3,] "c"  "school" 
[4,] "d"  "work"   
[5,] "e"  "subject"
[6,] "f"  "plans"  

> 
> 
> 
> cleanEx(); nameEx("gm.csi")
> ### * gm.csi
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gm.csi
> ### Title: Conditional Synergy Index
> ### Aliases: gm.csi
> ### Keywords: htest
> 
> ### ** Examples
> 
>   data(idd35)
>   gm.csi(1,2,3,data=idd35)
$penetrance.ratio
    idd5
idd3        NN         BB
  NN 3.0555556 0.87500000
  BB 0.2553191 0.02247191

$measure
                                     Conditional Synergy Index with 95% C.I.
idd3(1) ~ idd5(1) grouped by group(2)  estimate         SE     lower     upper
                    idd3(2) ~ idd5(2) 0.7937685 0.07063275 0.6553309 0.9322062
                                     Conditional Synergy Index with 95% C.I.
idd3(1) ~ idd5(1) grouped by group(2)     p.value
                    idd3(2) ~ idd5(2) 0.001751444

> 
>   ### >> constructing an additive and multiplicative penetrance
>   x <- c(0.1,0.4)
>   y <- c(0.05,0.5)
>   add.pen <- outer(x,y,FUN="+")
>   mult.pen <- outer(x,y)
>   het.pen <- outer(x,y,FUN="+") - outer(x,y)
> 
>   ### >> Function that samples data using the penetrance 
>   make.data <- function(R,pen,category) 
+     {
+       s.vec <- sample(c(1,2,3,4),R,replace=TRUE,prob=as.vector(pen))
+       fact.1 <- fact.2 <- vector()
+       for( i in 1:R ) {
+         ifelse( s.vec[i] == 1 || s.vec[i] == 3 , fact.1[i] <- 1, fact.1[i] <- 2 ) 
+         ifelse( s.vec[i] == 1 || s.vec[i] == 2 , fact.2[i] <- 1, fact.2[i] <- 2 ) 
+       }
+       cbind(X=fact.1,Y=fact.2,group=rep(category,R))  
+     }
> 
>   ### >>> Building datasets with affected and unaffected subjects   
>   add.aff <- make.data(200,add.pen,2)
>   add.uaf <- make.data(200,1-add.pen,1)  
>   add.df <- as.data.frame(rbind(add.uaf,add.aff))
>   
>   mult.aff <- make.data(200,mult.pen,2)
>   mult.uaf <- make.data(200,1-mult.pen,1)  
>   mult.df <- as.data.frame(rbind(mult.uaf,mult.aff))
>   
>   het.aff <- make.data(200,het.pen,2)
>   het.uaf <- make.data(200,1-het.pen,1)  
>   het.df <- as.data.frame(rbind(het.uaf,het.aff))
>    
>   gm.csi(1,2,3,add.df,pen=add.pen)   # Additivity
$penetrance.ratio
          [,1] [,2]
[1,] 0.1764706  1.5
[2,] 0.8181818  9.0

$measure
                               Conditional Synergy Index with 95% C.I.
X(1) ~ Y(1) grouped by group(2) estimate         SE    lower    upper p.value
                    X(2) ~ Y(2)        1 0.07847643 0.846189 1.153811     0.5

>   gm.csi(1,2,3,mult.df,pen=mult.pen) # Synergy
$penetrance.ratio
            [,1]       [,2]
[1,] 0.005025126 0.05263158
[2,] 0.020408163 0.25000000

$measure
                               Conditional Synergy Index with 95% C.I.
X(1) ~ Y(1) grouped by group(2) estimate        SE     lower     upper
                    X(2) ~ Y(2) 0.468889 0.1187764 0.2360915 0.7016866
                               Conditional Synergy Index with 95% C.I.
X(1) ~ Y(1) grouped by group(2)      p.value
                    X(2) ~ Y(2) 3.883321e-06

>   gm.csi(1,2,3,het.df,pen=het.pen)   # Antagonism
$penetrance.ratio
          [,1]     [,2]
[1,] 0.1695906 1.222222
[2,] 0.7543860 2.333333

$measure
                               Conditional Synergy Index with 95% C.I.
X(1) ~ Y(1) grouped by group(2) estimate        SE    lower   upper
                    X(2) ~ Y(2) 1.313177 0.0881867 1.140335 1.48602
                               Conditional Synergy Index with 95% C.I.
X(1) ~ Y(1) grouped by group(2)      p.value
                    X(2) ~ Y(2) 0.0001916673

> 
> 
> 
> cleanEx(); nameEx("gm.cv")
> ### * gm.cv
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gm.cv
> ### Title: Cross Validation for Graphical (Chain) Models
> ### Aliases: gm.cv
> ### Keywords: models regression
> 
> ### ** Examples
> 
>   
>   ABC <- gm.modelsim(500,"ABC,CD")
>   out <- gm.cv(5,data=ABC, strategy="f")
               Success probability with 95% C.I.
selected models No. edges -> a   success
   cd,bc | abc.              2 0.9000000
   cd,bc | abc.              2 0.8700000
   cd,bc | abc.              2 0.8200000
   cd,bc | abc.              2 0.8181818
   cd,bc | abc.              2 0.8100000
>   out
$pvalue
       possible edges
k-folds ab ac ad bc bd cd
      1  0  0 NA  0 NA  0
      2  0  0 NA  0 NA  0
      3  0  0 NA  0 NA  0
      4  0  0 NA  0 NA  0
      5  0  0 NA  0 NA  0

$ratio
$ratio[[1]]
   C
B           1          2
  1 6.3095238 0.25000000
  2 0.8695652 0.02631579
attr(,"class")
[1] "table"

$ratio[[2]]
   C
B          1          2
  1 7.210526 0.18181818
  2 1.000000 0.02564103
attr(,"class")
[1] "table"

$ratio[[3]]
   C
B          1          2
  1 7.694444 0.16666667
  2 1.052632 0.02564103
attr(,"class")
[1] "table"

$ratio[[4]]
   C
B           1          2
  1 6.4146341 0.18181818
  2 0.9473684 0.02272727
attr(,"class")
[1] "table"

$ratio[[5]]
   C
B           1     2
  1 7.8000000 0.125
  2 0.9545455 0.000
attr(,"class")
[1] "table"


$risk
$risk[[1]]
   C
B   1 2
  1 2 1
  2 1 1

$risk[[2]]
   C
B   1 2
  1 2 1
  2 2 1

$risk[[3]]
   C
B   1 2
  1 2 1
  2 2 1

$risk[[4]]
   C
B   1 2
  1 2 1
  2 1 1

$risk[[5]]
   C
B   1 2
  1 2 1
  2 1 1


$success
               Success probability with 95% C.I.
selected models No. edges -> a   success
   cd,bc | abc.              2 0.9000000
   cd,bc | abc.              2 0.8700000
   cd,bc | abc.              2 0.8200000
   cd,bc | abc.              2 0.8181818
   cd,bc | abc.              2 0.8100000

>   
>   ### DAG using a stepwise selection
>   out.dag <- gm.cv(3,data=ABC,option="j",chain="d|b|c|a")  
               Success probability with 95% C.I.
selected models No. edges -> a   success
     bcd | abc.              2 0.8802395
     bcd | abc.              2 0.8433735
     bcd | abc.              2 0.8072289
>   
>   ### Chain graph using BIC as selection criteria and allowing for 
>   ### non-decomposable models
>   cg <- gm.modelsim(1000,"ABD,BCE")  
>   out.cg <- gm.cv(3,data=cg,option="bu",chain="cb|de|a")
                Success probability with 95% C.I.
selected models  No. edges -> a   success
  bd,bce | abd.               2 0.6486486
  be,bd,bc | ad.              1 0.6216216
  be,bd,bc | ad.              1 0.5868263
>   
>   ## Not run: 
> ##D gm.cv(3,data=ABC,chain="DBD|A") # you have to use lowercase letters
> ##D             gm.cv(3,data=ABC,chain="dca|b") # a is supposed to be outcome variable 
> ##D                                   # and thus have to be in the very right block    
> ##D             
> ## End(Not run)
> 
> 
> 
> cleanEx(); nameEx("gm.gamma")
> ### * gm.gamma
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gm.gamma
> ### Title: Conditional Gamma coefficient estimation and confidence
> ###   intervals
> ### Aliases: gm.gamma
> ### Keywords: htest
> 
> ### ** Examples
> 
>   data(dp)
> 
>   ### Conditional Gamma by victime
>   gm.gamma(1,3,conditions=2,data=dp)
                                                Conditional Gamma with 95% C.I.
Hypothesis                                         estimate        SE
  Defendants.Race ~ Death.Penalty | Victims.Race -0.2076985 0.2112404
                                                Conditional Gamma with 95% C.I.
Hypothesis                                            lower     upper   p.value
  Defendants.Race ~ Death.Penalty | Victims.Race -0.6217221 0.2063252 0.1627465
>   ### the same
>   gm.gamma(dp$Defendants.Race,dp$Death.Penalty,data=dp,conditions=dp$Victims.Race)
                    Conditional Gamma with 95% C.I.
Hypothesis             estimate        SE      lower     upper   p.value
  X ~ Y | conditions -0.2076985 0.2112404 -0.6217221 0.2063252 0.1627465
>   
>   ### Stratified Gamma
>   dp.black <- data.frame(victime=dp$Victims.Race[dp$Victims.Race=="black"],
+                         killer=dp$Defendants.Race[dp$Victims.Race=="black"],
+                         death.penalty=dp$Death.Penalty[dp$Victims.Race=="black"])
>   dp.white <- data.frame(victime=dp$Victims.Race[dp$Victims.Race=="white"],
+                         killer=dp$Defendants.Race[dp$Victims.Race=="white"],
+                         death.penalty=dp$Death.Penalty[dp$Victims.Race=="white"])  
>   table(dp.black[,c(2,3,1)])
, , victime = white

       death.penalty
killer  yes no
  white   0  0
  black   0  0

, , victime = black

       death.penalty
killer  yes no
  white   0  9
  black   6 97

>   table(dp.white[,c(2,3,1)])  
, , victime = white

       death.penalty
killer  yes  no
  white  19 132
  black  11  52

, , victime = black

       death.penalty
killer  yes  no
  white   0   0
  black   0   0

> 
>   gm.gamma(2,3,data=dp.black)  
                        Marginal Gamma with 95% C.I.
Hypothesis               estimate SE lower upper p.value
  killer ~ death.penalty       -1  0    -1    -1       0
>   gm.gamma(2,3,data=dp.white)  
                        Marginal Gamma with 95% C.I.
Hypothesis                 estimate        SE     lower     upper   p.value
  killer ~ death.penalty -0.1901639 0.1979736 -0.578185 0.1978571 0.1683887
>   
>   ### Marginal Gamma
>   gm.gamma(1,3,data=dp)
                                 Marginal Gamma with 95% C.I.
Hypothesis                          estimate        SE      lower     upper
  Defendants.Race ~ Death.Penalty 0.08301454 0.1752010 -0.2603730 0.4264021
                                 Marginal Gamma with 95% C.I.
Hypothesis                          p.value
  Defendants.Race ~ Death.Penalty 0.3178125
> 
>   ### Analyse complete data set
>   gm.gamma(data=dp,type="m")
                                 Marginal Gamma with 95% C.I.
Hypothesis                          estimate         SE      lower     upper
  Defendants.Race ~ Victims.Race  0.92965261 0.02561588  0.8794464 0.9798588
  Defendants.Race ~ Death.Penalty 0.08301454 0.17520096 -0.2603730 0.4264021
  Victims.Race ~ Death.Penalty    0.48459384 0.17679894  0.1380743 0.8311134
                                 Marginal Gamma with 95% C.I.
Hypothesis                              p.value
  Defendants.Race ~ Victims.Race  1.080195e-288
  Defendants.Race ~ Death.Penalty  3.178125e-01
  Victims.Race ~ Death.Penalty     3.063261e-03
>   
>   ### Plot model
>   gamma <- gm.gamma(data=dp)
>    #> all edges
>   mat <- matrix(NA,nrow=3,ncol=3)
>   mat[upper.tri(mat)] <- gamma[,1]
>   gm.plot(model="abc",data.analysis=mat)
[1] TRUE
>    #> only significant edges
>   mat <- matrix(NA,nrow=3,ncol=3)   
>   tmp <- vector()
>   for( i in 1:dim(gamma)[1] ) ifelse(gamma[i,5]<0.05, tmp[i] <- gamma[i,1], tmp[i] <-NA)
>   mat[upper.tri(mat)] <- tmp
>   gm.plot(model="ab,bc",data.analysis=mat)
[1] TRUE
> 
> 
> 
> cleanEx(); nameEx("gm.generate")
> ### * gm.generate
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gm.generate
> ### Title: Random data frames of binary variables with given marginals
> ### Aliases: gm.generate
> ### Keywords: datagen distribution
> 
> ### ** Examples
> 
> gm.generate(10,c(.5,.2,.2))
   X1 X2 X3
1   1  1  1
2   2  1  2
3   2  1  1
4   1  1  1
5   2  1  1
6   1  1  2
7   1  1  2
8   1  1  1
9   1  1  1
10  1  2  1
> gm.generate(15,c(.5,.5,.5,.5,.5,.5))
   X1 X2 X3 X4 X5 X6
1   1  2  1  1  2  2
2   2  1  2  1  2  2
3   2  2  2  2  1  1
4   2  2  1  2  1  1
5   1  1  1  2  2  1
6   2  1  1  1  2  1
7   1  2  1  2  1  2
8   1  1  1  2  2  1
9   2  2  1  2  1  1
10  2  1  2  1  1  1
11  1  1  2  2  2  2
12  1  1  2  2  2  1
13  1  2  2  1  1  1
14  2  2  2  2  1  1
15  1  1  2  1  1  2
> 
> 
> 
> cleanEx(); nameEx("gm.mim")
> ### * gm.mim
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gm.mim
> ### Title: Graphical model selection (MIM)
> ### Aliases: gm.mim
> ### Keywords: models multivariate
> 
> ### ** Examples
> 
>   data(wam)
>   gm.mim(wam)
Coherent Backward Selection.
Fixed edges: none.
Decomposable mode, Chi-squared tests.
DFs adjusted for sparsity.
Model: abcdef
Deviance:   0.0000 DF:   0 P:  1.0000
    Edge        Test
Excluded   Statistic DF          P
    [ab]     18.5848 16      0.2908
    [ac]     20.6885 16      0.1908
    [ad]     14.1724 16      0.5859
    [ae]     18.7813 16      0.2802
    [af]     11.9511 16      0.7473
    [bc]     26.7393 16      0.0445 + 
    [bd]     34.7333 16      0.0043 + 
    [be]     56.5699 16      0.0000 + 
    [bf]     11.6731 16      0.7662
    [cd]     29.4391 16      0.0211 + 
    [ce]     26.0525 16      0.0533
    [cf]     81.6569 16      0.0000 + 
    [de]     78.2477 16      0.0000 + 
    [df]     46.2210 16      0.0001 + 
    [ef]     17.7282 16      0.3401
Removed edge [bf]
Model: acdef,abcde
Deviance:  11.6731 DF:  16 P:  0.7662
    Edge        Test
Excluded   Statistic DF          P
    [ab]     12.4561  8      0.1320
    [af]      5.8225  8      0.6671
    [ef]     10.8812  8      0.2085
Removed edge [af]
Model: cdef,abcde
Deviance:  17.4955 DF:  24 P:  0.8268
    Edge        Test
Excluded   Statistic DF          P
    [ab]     12.4561  8      0.1320
    [ac]     11.2273  8      0.1891
    [ad]      5.7888  8      0.6709
    [ae]     14.6090  8      0.0672
    [ef]      9.8318  4      0.0434 + 
Removed edge [ad]
Model: cdef,bcde,abce
Deviance:  23.2843 DF:  32 P:  0.8691
    Edge        Test
Excluded   Statistic DF          P
    [ab]     10.6057  4      0.0314 + 
    [ac]     10.4323  4      0.0337 + 
    [ae]     10.4263  4      0.0338 + 
Selected model: cdef,bcde,abce
Test of H0: cdef,bcde,abce
against H:  abcdef
LR:  23.2843    DF:  32    P: 0.8691
$accepted
[1] "cdef,bcde,abce"

$rejected
NULL

$base
[1] "abcdef"

$strategy
[1] "backwards"

$`tests against saturated`
                    LR df p.value
cdef,bcde,abce 23.2843 32  0.8691

$`p values`
$`p values`$`cdef,bcde,abce`
   a      b      c      d      e      f
a NA 0.0314 0.0337     NA 0.0338     NA
b NA     NA 0.0051 0.0000 0.0000     NA
c NA     NA     NA 0.0036 0.0081 0.0000
d NA     NA     NA     NA 0.0000 0.0000
e NA     NA     NA     NA     NA 0.0434
f NA     NA     NA     NA     NA     NA


$`variable names`
     [,1] [,2]     
[1,] "a"  "lecture"
[2,] "b"  "gender" 
[3,] "c"  "school" 
[4,] "d"  "work"   
[5,] "e"  "subject"
[6,] "f"  "plans"  

>   ### giving strategy
>   gm.mim(wam,strategy="e")
Minimal model: a,b,c,d,e,f
Maximal model: abcdef
EH-search is initialized.
Acceptance criterion: p>0.05
Model class: homogeneous graphical models.
Maximal model: abcdef
Minimal model: a,b,c,d,e,f
Search space contains 2^15=32768 models.
Maximum no. of models not specified.
Step 1
1 accepted model
1 rejected model
15 minimal undetermined models
15 maximal undetermined models
Fitting 15 maximal undetermined
Accepted 8, rejected 7
Step 2
8 accepted models
7 rejected models
1 minimal undetermined model
28 maximal undetermined models
Fitting 1 minimal undetermined
Accepted 1
EH-search is now complete after fitting 16 models.
1 minimal accepted model
a,bcd,bde,cdf
LR:   51.691 DF:    47 P:    0.296
1 minimal accepted model
a,bcd,bde,cdf
LR:   51.691 DF:    47 P:    0.296
7 maximal rejected models
abdef,acdef
LR:   26.739 DF:    16 P:    0.044
abcef,acdef
LR:   34.733 DF:    16 P:    0.004
abcdf,acdef
LR:   56.570 DF:    16 P:    0.000
abcef,abdef
LR:   29.439 DF:    16 P:    0.021
abcde,abdef
LR:   81.657 DF:    16 P:    0.000
abcdf,abcef
LR:   78.248 DF:    16 P:    0.000
abcde,abcef
LR:   46.221 DF:    16 P:    0.000
$accepted
[1] "a,bcd,bde,cdf"

$rejected
[1] "abdef,acdef" "abcef,acdef" "abcdf,acdef" "abcef,abdef" "abcde,abdef"
[6] "abcdf,abcef" "abcde,abcef"

$base
[1] "a,b,c,d,e,f - abcdef"

$strategy
[1] "eh"

$`tests against saturated`
                  LR     df p.value
a,bcd,bde,cdf 51.691  0.004  16.000
abdef,acdef   47.000 56.570   0.000
abcef,acdef    0.296 16.000  78.248
abcdf,acdef   26.739  0.000  16.000
abcef,abdef   16.000 29.439   0.000
abcde,abdef    0.044 16.000  46.221
abcdf,abcef   34.733  0.021  16.000
abcde,abcef   16.000 81.657   0.000

$`p values`
$`p values`$`a,bcd,bde,cdf`
   a  b      c     d  e  f
a NA NA     NA    NA NA NA
b NA NA 0.0374 0e+00  0 NA
c NA NA     NA 4e-04 NA  0
d NA NA     NA    NA  0  0
e NA NA     NA    NA NA NA
f NA NA     NA    NA NA NA


$`variable names`
     [,1] [,2]     
[1,] "a"  "lecture"
[2,] "b"  "gender" 
[3,] "c"  "school" 
[4,] "d"  "work"   
[5,] "e"  "subject"
[6,] "f"  "plans"  

>   
>   ### giving minimal and maximal model
>   gm.mim(wam,strategy="e",model="a,bc,de,f - abcd,cdef")
Minimal model: a,bc,de,f
Maximal model: abcd,cdef
EH-search is initialized.
Acceptance criterion: p>0.05
Model class: homogeneous graphical models.
Maximal model: abcd,cdef
Minimal model: a,bc,de,f
Search space contains 2^9=512 models.
Maximum no. of models not specified.
Step 1
1 accepted model
1 rejected model
9 minimal undetermined models
9 maximal undetermined models
Fitting 9 maximal undetermined
Accepted 4, rejected 5
Step 2
4 accepted models
5 rejected models
1 minimal undetermined model
6 maximal undetermined models
Fitting 1 minimal undetermined
Accepted 1
EH-search is now complete after fitting 10 models.
1 minimal accepted model
a,bcd,cdf,def
LR:   10.487 DF:    11 P:    0.487
1 minimal accepted model
a,bcd,cdf,def
LR:   10.487 DF:    11 P:    0.487
5 maximal rejected models
abc,acd,cdef
LR:   40.067 DF:     4 P:    0.000
abc,abd,cef,def
LR:   18.780 DF:     7 P:    0.009
abcd,cde,def
LR:   67.832 DF:     4 P:    0.000
abcd,cde,cef
LR:   34.542 DF:     4 P:    0.000
abcd,cde,cdf
LR:    9.832 DF:     4 P:    0.043
$accepted
[1] "a,bcd,cdf,def"

$rejected
[1] "abc,acd,cdef"    "abc,abd,cef,def" "abcd,cde,def"    "abcd,cde,cef"   
[5] "abcd,cde,cdf"   

$base
[1] "a,bc,de,f - abcd,cdef"

$strategy
[1] "eh"

$`tests against saturated`
                    LR     df p.value
a,bcd,cdf,def   10.487 18.780  34.542
abc,acd,cdef    11.000  7.000   4.000
abc,abd,cef,def  0.487  0.009   0.000
abcd,cde,def    40.067 67.832   9.832
abcd,cde,cef     4.000  4.000   4.000
abcd,cde,cdf     0.000  0.000   0.043

$`p values`
$`p values`$`a,bcd,cdf,def`
   a  b      c     d  e      f
a NA NA     NA    NA NA     NA
b NA NA 0.0374 0e+00 NA     NA
c NA NA     NA 4e-04 NA 0.0000
d NA NA     NA    NA  0 0.0000
e NA NA     NA    NA NA 0.0243
f NA NA     NA    NA NA     NA


$`variable names`
     [,1] [,2]     
[1,] "a"  "lecture"
[2,] "b"  "gender" 
[3,] "c"  "school" 
[4,] "d"  "work"   
[5,] "e"  "subject"
[6,] "f"  "plans"  

>   ### giving block structure
>   gm.mim(wam,strategy="f",model="a,b,c|abc,de|abcd,ef",chain="abc|de|f",options="BNU")
Block structure set. 
Block Mode is now: on.
a,b,c  | abc,de  | ef,abcde
Non-coherent Forward Selection.
Fixed edges: none.
Critical value:   0.0500
Block no.   1
Unrestricted mode, BIC criterion.
Model: a,b,c
Deviance:   0.4468 DF:   4 BIC:    4896.3649
    Edge      Change
   Added      in BIC
    [ab]      7.0744
    [ac]      7.0521
    [bc]      7.0559
Block no.   2
Unrestricted mode, BIC criterion.
Model: abc,de
Deviance: 100.4451 DF:  21 BIC:    8034.3622
    Edge      Change
   Added      in BIC
    [ad]      6.8890
    [ae]      7.0332
    [bd]    -25.1505
    [be]    -44.5447
    [cd]      6.6398
    [ce]      0.9334
Added edge [be]
Model: de,be,abc
Deviance:  48.8187 DF:  20 BIC:    7989.8175
    Edge      Change
   Added      in BIC
    [ad]      6.8925
    [ae]     13.7557
    [bd]     -3.7242
    [cd]      6.6272
    [ce]      7.4240
Added edge [bd]
Model: bde,abc
Deviance:  30.9311 DF:  18 BIC:    7986.0933
    Edge      Change
   Added      in BIC
    [ad]     13.1376
    [ae]     13.7557
    [cd]      7.1748
    [ce]      7.4240
Block no.   3
Unrestricted mode, BIC criterion.
Model: ef,abcde
Deviance: 108.5925 DF:  30 BIC:    9191.2791
    Edge      Change
   Added      in BIC
    [af]     14.0869
    [bf]     13.8061
    [cf]    -42.3917
    [df]     -9.1010
Added edge [cf]
Model: cef,abcde
Deviance:  52.0373 DF:  28 BIC:    9148.8874
    Edge      Change
   Added      in BIC
    [af]     26.8080
    [bf]     26.0780
    [df]     -6.2150
Added edge [df]
Model: cdef,abcde
Deviance:  17.4955 DF:  24 BIC:    9142.6725
    Edge      Change
   Added      in BIC
    [af]     50.8312
    [bf]     51.1092
The selected block-recursive model is: 
  1  a,b,c
  2  bde,abc
  3  cdef,abcde
The current block-recursive model is: 
  1  a,b,c
  2  bde,abc
  3  cdef,abcde
Test of H0: a,b,c  | bde,abc  | cdef,abcde
against H:  abc  | abcde  | abcdef
LR:  48.8735    DF:  46    P: 0.3584
Block Mode is now: off.
$accepted
[1] "a,b,c|bde,abc|cdef,abcde"

$rejected
NULL

$base
[1] "a,b,c|abc,de|abcd,ef"

$strategy
[1] "forwards"

$`tests against saturated`
                              LR df p.value
a,b,c|bde,abc|cdef,abcde 48.8735 46  0.3584

$`p values`
list()

$`variable names`
     [,1] [,2]     
[1,] "a"  "lecture"
[2,] "b"  "gender" 
[3,] "c"  "school" 
[4,] "d"  "work"   
[5,] "e"  "subject"
[6,] "f"  "plans"  

> 
> 
> 
> cleanEx(); nameEx("gm.modelsim")
> ### * gm.modelsim
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gm.modelsim
> ### Title: Random data frames with given dependence model and marginals
> ### Aliases: gm.modelsim
> ### Keywords: datagen graphs
> 
> ### ** Examples
> 
>     gm.modelsim(100,"AB,AC")
    A B C
1   1 1 1
2   1 1 1
3   1 1 1
4   1 1 1
5   1 1 1
6   1 1 1
7   1 1 2
8   1 1 2
9   1 1 2
10  1 1 2
11  1 1 2
12  1 1 2
13  1 1 2
14  1 1 2
15  1 1 2
16  1 1 2
17  1 1 2
18  1 1 2
19  1 1 2
20  1 1 2
21  1 1 2
22  1 1 2
23  1 1 2
24  1 1 2
25  1 1 2
26  1 1 2
27  1 1 2
28  1 1 2
29  1 1 2
30  1 2 1
31  1 2 1
32  1 2 1
33  1 2 1
34  1 2 2
35  1 2 2
36  1 2 2
37  1 2 2
38  1 2 2
39  1 2 2
40  1 2 2
41  1 2 2
42  1 2 2
43  1 2 2
44  1 2 2
45  1 2 2
46  1 2 2
47  1 2 2
48  1 2 2
49  1 2 2
50  1 2 2
51  2 1 1
52  2 1 1
53  2 1 1
54  2 1 1
55  2 1 1
56  2 1 1
57  2 1 1
58  2 1 1
59  2 1 1
60  2 1 1
61  2 1 1
62  2 1 1
63  2 1 1
64  2 1 1
65  2 1 1
66  2 1 1
67  2 1 1
68  2 1 1
69  2 1 1
70  2 1 1
71  2 1 1
72  2 1 1
73  2 1 1
74  2 1 1
75  2 1 1
76  2 1 1
77  2 1 1
78  2 1 1
79  2 1 1
80  2 1 1
81  2 1 1
82  2 1 1
83  2 1 1
84  2 1 1
85  2 1 1
86  2 1 1
87  2 1 1
88  2 1 1
89  2 1 1
90  2 1 1
91  2 1 1
92  2 1 2
93  2 1 2
94  2 1 2
95  2 1 2
96  2 1 2
97  2 2 1
98  2 2 1
99  2 2 1
100 2 2 1
>     table( gm.modelsim(100,"a,b,c") )
, , c = 1

   b
a    1  2
  1 12 12
  2 12 12

, , c = 2

   b
a    1  2
  1 12 12
  2 12 12

>     
>     tmp.df <- gm.modelsim(10000,"abf,cd,cf,bdeg,bfg")
>     
>     # with given number of categories
>     tmp.df <- gm.modelsim(1000,"AB,C",list(c(1,1,1),c(1,1),c(1,1,1)))
> 
>     # with given number of categories and marginals
>     tmp.df <- gm.modelsim(1000,"ABC",list(c(0.3,0.3,0.4),c(0.6,.4),c(0.25,0.25,0.5)))
>     table(tmp.df)
, , C = 1

   B
A     1   2
  1   1 256
  2   6  76
  3   3 146

, , C = 2

   B
A     1   2
  1   5  41
  2  29  12
  3  75 116

, , C = 3

   B
A     1   2
  1   8  23
  2  71  10
  3  81  42

> 
>     ## Not run: 
> ##D tmp.df <- gm.modelsim(100,"ABC",list(3,2,3))# (number of categories will be 2 x 2 x 2 )
> ##D             gm.modelsim(100,"123")
> ##D             
> ## End(Not run)
> 
> 
> 
> cleanEx(); nameEx("gm.or")
> ### * gm.or
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gm.or, gm.rr
> ### Title: Stratified odds ratios or risk ratios
> ### Aliases: gm.or gm.rr
> ### Keywords: htest
> 
> ### ** Examples
> 
>   group  <- c("treatment","placebo1","placebo2")
>   target <- c("low","medium","high")
>   mat    <- matrix(c(78,35,53,77,10,89,16,119,32),nrow=3,ncol=3,byrow=TRUE, 
+                     dimnames=list("group"=group,"target"=target))
>   treat  <- data.frame(expand.table(mat))
>   table(treat)
           target
group       low medium high
  treatment  78     35   53
  placebo1   77     10   89
  placebo2   16    119   32
>   
>   ### Marginal OR
>   gm.or(1,2,treat,reference="f")
                                  Marginal Odds Ratio with 95% C.I.
                                     estimate     lower     upper      p.value
  group(placebo1) ~ target(low)     1.0000000        NA        NA           NA
  group(placebo1) ~ target(medium)  0.2894249 0.1339953  0.625147 0.0009523669
  group(placebo1) ~ target(high)    1.7010537 1.0701542  2.703894 0.0249650179
  group(placebo2) ~ target(low)     1.0000000        NA        NA           NA
  group(placebo2) ~ target(medium) 16.5750000 8.5943239 31.966520 0.0000000000
  group(placebo2) ~ target(high)    2.9433962 1.4701993  5.892794 0.0020542309
>   gm.or(treat$target,treat$group)
                          Marginal Odds Ratio with 95% C.I.
                             estimate      lower      upper      p.value
  X(low) ~ Y(treatment)    2.94339623 1.47019932 5.89279375 2.054231e-03
  X(low) ~ Y(placebo1)     1.73033708 0.88260600 3.39230235 1.110005e-01
  X(low) ~ Y(placebo2)     1.00000000         NA         NA           NA
  X(medium) ~ Y(treatment) 0.17758047 0.09958480 0.31666300 1.787661e-09
  X(medium) ~ Y(placebo1)  0.03021433 0.01411134 0.06469307 0.000000e+00
  X(medium) ~ Y(placebo2)  1.00000000         NA         NA           NA
>   
>   ### Stratified OR
>   data <- gm.modelsim(1000,"ab,bcd",list(c(1,1),c(1,1),c(1,1),c(1,1)))  
>   gm.or(1,2,conditions=c(3,4),data=data)
Warning in chisq.test(xx, correct = correction) :
  Chi-squared approximation may be incorrect
Warning in chisq.test(xx, correct = correction) :
  Chi-squared approximation may be incorrect
Warning in chisq.test(xx, correct = correction) :
  Chi-squared approximation may be incorrect
Warning in chisq.test(xx, correct = correction) :
  Chi-squared approximation may be incorrect
                               Stratified Odds Ratio with 95% C.I.
between a(2) and                 estimate       lower    upper    p.value
  b(1) stratified by c(1) d(1)  0.6065175 0.328283102 1.103472 0.08243512
  b(2) stratified by c(1) d(1)  1.0000000          NA       NA         NA
  b(1) stratified by c(1) d(2)  0.4978506 0.030393423 6.176141 0.54751131
  b(2) stratified by c(1) d(2)  1.0000000          NA       NA         NA
  b(1) stratified by c(2) d(1)  0.5995973 0.210066913 1.661131 0.28630755
  b(2) stratified by c(2) d(1)  1.0000000          NA       NA         NA
  b(1) stratified by c(2) d(2)  0.3657703 0.005916716 7.418736 0.46992481
  b(2) stratified by c(2) d(2)  1.0000000          NA       NA         NA
>   
>   ### Marginal RR
>   gm.rr(1,2,treat,reference="f")
                                  Marginal Risk Ratio with 95% C.I.
                                    estimate     lower     upper      p.value
  group(placebo1) ~ target(low)    1.0000000        NA        NA           NA
  group(placebo1) ~ target(medium) 0.3711002 0.1947436 0.7071624 0.0009523669
  group(placebo1) ~ target(high)   1.3251875 1.0306636 1.7038751 0.0249650179
  group(placebo2) ~ target(low)    1.0000000        NA        NA           NA
  group(placebo2) ~ target(medium) 2.8459259 2.1463686 3.7734872 0.0000000000
  group(placebo2) ~ target(high)   1.6477987 1.2349688 2.1986310 0.0020542309
>   gm.rr(treat$target,treat$group)
                          Marginal Risk Ratio with 95% C.I.
                            estimate      lower     upper      p.value
  X(low) ~ Y(treatment)    1.3307908 1.10176053 1.6074312 2.054231e-03
  X(low) ~ Y(placebo1)     1.1256494 0.97720977 1.2966372 1.110005e-01
  X(low) ~ Y(placebo2)     1.0000000         NA        NA           NA
  X(medium) ~ Y(treatment) 0.3644940 0.26078582 0.5094444 1.787661e-09
  X(medium) ~ Y(placebo1)  0.1053915 0.05756317 0.1929597 0.000000e+00
  X(medium) ~ Y(placebo2)  1.0000000         NA        NA           NA
>   
>   ### Stratified RR
>   data <- gm.modelsim(1000,"ab,bcd",list(c(1,1),c(1,1),c(1,1),c(1,1)))  
>   gm.rr(1,2,conditions=c(3,4),data=data)
Warning in chisq.test(xx, correct = correction) :
  Chi-squared approximation may be incorrect
Warning in chisq.test(xx, correct = correction) :
  Chi-squared approximation may be incorrect
                               Stratified Risk Ratio with 95% C.I.
between a(2) and                 estimate    lower     upper      p.value
  b(1) stratified by c(1) d(1)   5.374019 3.611196  7.997374 0.000000e+00
  b(2) stratified by c(1) d(1)   1.000000       NA        NA           NA
  b(1) stratified by c(1) d(2)   9.496124 3.081863 29.260343 3.802349e-08
  b(2) stratified by c(1) d(2)   1.000000       NA        NA           NA
  b(1) stratified by c(2) d(1)  11.836701 6.886385 20.345581 0.000000e+00
  b(2) stratified by c(2) d(1)   1.000000       NA        NA           NA
  b(1) stratified by c(2) d(2)        NaN      NaN       NaN 1.000000e+00
  b(2) stratified by c(2) d(2)   1.000000       NA        NA           NA
>   
>   ### ALSO
>   gm.or(X=data$a,Y=data$b,conditions=data$d)
                                   Stratified Odds Ratio with 95% C.I.
between X(2) and                    estimate     lower    upper      p.value
  Y(1) stratified by conditions(1)  25.92008 17.232418  40.0000 0.000000e+00
  Y(2) stratified by conditions(1)   1.00000        NA       NA           NA
  Y(1) stratified by conditions(2)  20.28390  5.300106 117.5499 3.448387e-08
  Y(2) stratified by conditions(2)   1.00000        NA       NA           NA
> 
> 
> 
> 
> cleanEx(); nameEx("gm.plot")
> ### * gm.plot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gm.plot
> ### Title: Plot graphical models
> ### Aliases: gm.plot
> ### Keywords: hplot graphs
> 
> ### ** Examples
> 
>   gm.plot("ABC,CDE")
[1] TRUE
> 
>   gm.plot("VBA,EVC")
[1] TRUE
>   
>   gm.plot(c("ABC,CDE","AB,BC,CD,DE","ABC,DEF,GHI"))
[1] TRUE
>   
>   gm.plot("AB,AC",FALSE,matrix(0.5,nrow=3,ncol=3))
[1] TRUE
> 
> 
> 
> cleanEx(); nameEx("gm.si")
> ### * gm.si
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gm.si
> ### Title: Synergy Index
> ### Aliases: gm.si
> ### Keywords: htest
> 
> ### ** Examples
> 
>   data(wynder)
>   gm.si(1,2,3,wynder)
$ratio
   Smoking
Alc        1         2         3
  1 1.000000  2.421875  8.395833
  2 3.427885  4.090278  4.520833
  3 9.687500 13.993056 19.375000

$covariance
            1             2             3           4
1 0.124408433  0.0103327622  0.0110612699 0.001190615
2 0.010332762  0.0740697255 -0.0004243675 0.074728349
3 0.011061270 -0.0004243675  1.1600977365 0.509701432
4 0.001190615  0.0747283492  0.5097014318 0.829750068

$measure
                                       Synergy Index with 95% C.I.
Alc(1) ~ Smoking(1) grouped by Group(2) estimates        SE      lower    upper
                    Alc(2) ~ Smoking(2) 0.8027197 0.4394010 0.33926974 1.899252
                    Alc(2) ~ Smoking(3) 0.3584013 0.7593654 0.08090896 1.587605
                    Alc(3) ~ Smoking(2) 1.2852482 0.8380314 0.24868715 6.642333
                    Alc(3) ~ Smoking(3) 1.1424870 0.7973011 0.23943485 5.451490
                    overall             0.8482290 0.3949417 0.39114530 1.839450
                                       Synergy Index with 95% C.I.
Alc(1) ~ Smoking(1) grouped by Group(2)    p.value
                    Alc(2) ~ Smoking(2) 0.30849808
                    Alc(2) ~ Smoking(3) 0.08830568
                    Alc(3) ~ Smoking(2) 0.38229685
                    Alc(3) ~ Smoking(3) 0.43365630
                    overall             0.33841887

> 
>   # Smoking and alcohol in relation to oral cancer among male veterans under age 60.
>   # (from "Modern Epidemiology")
>   oral <- array(c(20,3,18,8,12,6,166,225),dim=c(2,2,2), 
+             dimnames=list(Group=c("control","cases"),
+             Smoker=c("no","yes"),Alcohol=c("no","yes")))
>   oral.df <- expand.table(oral)
>   # grouping variable is first in data frame
>   gm.si(2,3,1,oral.df)
$ratio
      Alcohol
Smoker       no      yes
   no  1.000000 3.333333
   yes 2.962963 9.036145

$measure
                                          Synergy Index with 95% C.I.
Smoker(1) ~ Alcohol(1) grouped by Group(2) estimates        SE     lower
                              Case/Control  1.870482 0.5424005 0.6460430
                              Cohort        1.870482 0.3796716 0.8887436
                                          Synergy Index with 95% C.I.
Smoker(1) ~ Alcohol(1) grouped by Group(2)    upper    p.value
                              Case/Control 5.415588 0.12414959
                              Cohort       3.936684 0.04954208

>   
>   # Effects must be ascending in respect to the reference category
>   show.effect <- array(c(1,7,2,7,7,12,106,48),dim=c(2,2,2),
+                         dimnames=list(A=1:2,B=1:2,C=1:2))
>   # produces NaN
>   gm.si(1,2,3,expand.table(show.effect))
Warning in log(S[elliott.smith]) : NaNs produced
Warning in log(S[elliott.smith]) : NaNs produced
Warning in log(S[elliott.smith]) : NaNs produced
Warning in log(S) : NaNs produced
Warning in log(S) : NaNs produced
Warning in log(S) : NaNs produced
$ratio
   B
A           1         2
  1 1.0000000 7.5714286
  2 0.2448980 0.9795918

$measure
                           Synergy Index with 95% C.I.
A(1) ~ B(1) grouped by C(2)    estimates         SE lower upper p.value
               Case/Control -0.003508772 -56.219694   NaN   NaN     NaN
               Cohort       -0.003508772   7.041897   NaN   NaN     NaN

>   # > re-ordering variable B helps
>   gm.si(1,2,3,expand.table(show.effect),reference=c(1,2,2))
$ratio
   B
A            1         2
  1 0.13207547 1.0000000
  2 0.03234501 0.1293801

$measure
                           Synergy Index with 95% C.I.
A(1) ~ B(2) grouped by C(2) estimates       SE        lower        upper
               Case/Control 0.8997214 1.291759 7.154189e-02     11.31503
               Cohort       0.8997214 7.041897 9.120840e-07 887526.42897
                           Synergy Index with 95% C.I.
A(1) ~ B(2) grouped by C(2)   p.value
               Case/Control 0.4674016
               Cohort       0.4940137

> 
> 
> 
> 
> cleanEx(); nameEx("gm.sim.ixj")
> ### * gm.sim.ixj
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gm.sim.ixj
> ### Title: Random (i x j)-way dependency tables with given marginals
> ### Aliases: gm.sim.ixj
> ### Keywords: datagen
> 
> ### ** Examples
> 
>     gm.sim.ixj(1000,c(1,1,1),c(1,1,1,1,1))
         [,1]      [,2]      [,3]      [,4]      [,5]
[1,] 266.2432 573.28051 202.48025 944.73059 629.48493
[2,] 273.6763 387.64176 716.58513  36.86110  23.83096
[3,] 460.0805  39.07773  80.93462  18.40830 346.68411
>     gm.sim.ixj(1000,c(.2,.3,.4,.1),c(.5,.2,.3)) 
          [,1]     [,2]        [,3]
[1,]  41.98894 28.72136 129.2896968
[2,] 206.41983 36.56039  57.0197818
[3,] 308.16673 46.20765  45.6256221
[4,]  72.04423 27.73759   0.2181774
>     
>     round(gm.sim.ixj(30,c(1,1),c(1,1)))       
     [,1] [,2]
[1,]   11   19
[2,]   23    7
>     
>     tab <- round(gm.sim.ixj(500,c(.5,.5),c(.5,.5)))
>     chisq.test(tab)   

	Pearson's Chi-squared test with Yates' continuity correction

data:  tab 
X-squared = 265.0047, df = 1, p-value < 2.2e-16

> 
> 
> 
> cleanEx(); nameEx("gmvalid-package")
> ### * gmvalid-package
> 
> flush(stderr()); flush(stdout())
> 
> ### Encoding: latin1
> 
> ### Name: gmvalid-package
> ### Title: Validation of graphical models
> ### Aliases: gmvalid-package gmvalid
> ### Keywords: datagen models multivariate nonparametric graphs htest
> 
> ### ** Examples
> 
>     ### Generates a data frame given a dependence model
>     gm.a <- gm.modelsim(1000,"ABC,CDE")
>     
>     ### Modelselection with graphical output
>     gm.analysis(gm.a)   
Coherent Backward Selection.
Fixed edges: none.
Decomposable mode, Chi-squared tests.
DFs adjusted for sparsity.
Model: abcde
Deviance:   0.0000 DF:   0 P:  1.0000
    Edge        Test
Excluded   Statistic DF          P
    [ab]      5.5067  7      0.5984
    [ac]     33.5132  7      0.0000 + 
    [ad]      0.6239  7      0.9989
    [ae]      1.4149  7      0.9851
    [bc]    125.9979  7      0.0000 + 
    [bd]      1.2103  7      0.9907
    [be]      1.4539  7      0.9839
    [cd]     29.2851  7      0.0001 + 
    [ce]     96.7437  8      0.0000 + 
    [de]     21.3324  7      0.0033 + 
Removed edge [ad]
Model: bcde,abce
Deviance:   0.6239 DF:   8 P:  0.9997
    Edge        Test
Excluded   Statistic DF          P
    [ab]      5.1839  4      0.2689
    [ae]      0.9774  4      0.9132
    [bd]      0.8875  4      0.9264
Removed edge [bd]
Model: cde,abce
Deviance:   1.5113 DF:  12 P:  0.9999
    Edge        Test
Excluded   Statistic DF          P
    [ab]      5.1839  4      0.2689
    [ae]      0.9774  4      0.9132
    [be]      0.5327  4      0.9702
Removed edge [be]
Model: cde,ace,abc
Deviance:   2.0440 DF:  16 P:  1.0000
    Edge        Test
Excluded   Statistic DF          P
    [ab]      4.6627  2      0.0972
    [ae]      0.4561  2      0.7961
Removed edge [ae]
Model: cde,abc
Deviance:   2.5001 DF:  18 P:  1.0000
    Edge        Test
Excluded   Statistic DF          P
    [ab]      4.6627  2      0.0972
Removed edge [ab]
Selected model: cde,bc,ac
Test of H0: cde,bc,ac
against H:  abcde
LR:   7.1629    DF:  20    P: 0.9961
$strategy
[1] "backwards"

$model
[1] "cde,bc,ac"

$edge.measure
[1] "gamma.cond"

$analysis
  a          b          c            d            e
a 0 -0.2426464 -0.8130693  0.006203153 0.0002715632
b 0  0.0000000 -0.9406068 -0.094558086 0.0059487887
c 0  0.0000000  0.0000000  0.756207675 0.9248805905
d 0  0.0000000  0.0000000  0.000000000 0.5795365790
e 0  0.0000000  0.0000000  0.000000000 0.0000000000

$`variable names`
     [,1] [,2]
[1,] "a"  "A" 
[2,] "b"  "B" 
[3,] "c"  "C" 
[4,] "d"  "D" 
[5,] "e"  "E" 

>     
>     ### Model validation using the bootstrap 
>     gm.boot.coco(100,gm.a,recursive=TRUE,follow=TRUE)

Run number 1
Run number 26
Run number 51
Run number 76

$`bootstrapped models`
  ac,bc,cde     abc,cde    abcd,cde abc,bce,cde abc,ace,cde abc,acd,cde 
       0.37        0.33        0.07        0.04        0.04        0.02 
      abcde  ac,bcd,cde     ac,bcde  ac,bce,cde  acd,bc,cde    abce,cde 
       0.02        0.02        0.02        0.02        0.02        0.01 
 ace,bc,cde     acde,bc 
       0.01        0.01 

$`bootstrapped subgraphs`
   bc    ac   cde   abc   acd   bcd   bce  abcd   ace  bcde  acde  abce abcde 
 1.00  1.00  1.00  0.53  0.14  0.13  0.11  0.09  0.09  0.04  0.03  0.03  0.02 

$`bootstrapped cliques`
  cde   abc    ac    bc  abcd   bce   ace   acd abcde   bcd  bcde  abce  acde 
 0.95  0.43  0.43  0.41  0.07  0.06  0.05  0.04  0.02  0.02  0.02  0.01  0.01 

$`bootstrapped edges`
  a    b c    d    e
a 0 0.53 1 0.14 0.09
b 0 0.00 1 0.13 0.11
c 0 0.00 0 1.00 1.00
d 0 0.00 0 0.00 1.00
e 0 0.00 0 0.00 0.00

$`original model`
[1] "ac,bc,cde"

$`differences from original data set`
$`differences from original data set`$`more edges`
 1  0  2  3  5 
40 37 13  8  2 

$`differences from original data set`$`less edges`
  0 
100 

$`differences from original data set`$differences
 1  0  2  3  5 
40 37 13  8  2 


$`variable names`
     [,1] [,2]
[1,] "a"  "A" 
[2,] "b"  "B" 
[3,] "c"  "C" 
[4,] "d"  "D" 
[5,] "e"  "E" 

> 
>     ### Model prediction using cross validation
>     gm.cv(3,data=gm.a,strategy="f",options="b")
                Success probability with 95% C.I.
selected models  No. edges -> a   success
  ce,cd,bc | ac.              1 0.6156156
  cde,bc | ac.                1 0.6156156
  cde,bc | ac.                1 0.5915916
$pvalue
       possible edges
k-folds ab ac ad ae bc bd be cd ce     de
      1 NA  0 NA NA  0 NA NA  0  0 0.0000
      2 NA  0 NA NA  0 NA NA  0  0     NA
      3 NA  0 NA NA  0 NA NA  0  0 0.0014

$ratio
$ratio[[1]]

        1         2 
1.4688797 0.2678571 
attr(,"class")
[1] "table"

$ratio[[2]]

        1         2 
1.4032258 0.2962963 
attr(,"class")
[1] "table"

$ratio[[3]]

       1        2 
1.373494 0.250000 
attr(,"class")
[1] "table"


$risk
$risk[[1]]

1 2 
2 1 

$risk[[2]]

1 2 
2 1 

$risk[[3]]

1 2 
2 1 


$success
                Success probability with 95% C.I.
selected models  No. edges -> a   success
  ce,cd,bc | ac.              1 0.6156156
  cde,bc | ac.                1 0.6156156
  cde,bc | ac.                1 0.5915916

>     
>     ### Testing interaction on the penetrance scale
>     ### using the conditional synergy index (CSI)
>     gm.csi(1,2,3,data=gm.a)
$penetrance.ratio
   B
A           1           2
  1 2.1724138 0.064705882
  2 0.3064516 0.008695652

$measure
                           Conditional Synergy Index with 95% C.I.
A(1) ~ B(1) grouped by C(2)   estimate         SE      lower     upper
                A(2) ~ B(2) 0.01127039 0.08684418 -0.1589411 0.1814819
                           Conditional Synergy Index with 95% C.I.
A(1) ~ B(1) grouped by C(2)      p.value
                A(2) ~ B(2) 2.480579e-30

> 
>     ### Testing interaction on a additivity scale
>     ### using the synergy index (S)
>     gm.si(1,2,3,data=gm.a)   
$ratio
   B
A           1           2
  1 1.0000000 0.029785247
  2 0.1410650 0.004002761

$measure
                           Synergy Index with 95% C.I.
A(1) ~ B(1) grouped by C(2) estimates         SE     lower     upper
               Case/Control 0.5445138 0.02877836 0.5146508 0.5761095
               Cohort       0.5445138 0.01717274 0.5264916 0.5631529
                           Synergy Index with 95% C.I.
A(1) ~ B(1) grouped by C(2)       p.value
               Case/Control  2.486820e-99
               Cohort       9.522408e-275

> 
>     ### Gamma Coefficient B indpendent D given C
>     gm.gamma(2,4,data=gm.a,conditions=3)
           Conditional Gamma with 95% C.I.
Hypothesis     estimate        SE     lower     upper   p.value
  B ~ D | C -0.07027027 0.5003451 -1.050929 0.9103882 0.4441548
> 
> 
> 
> 
> cleanEx(); nameEx("idd35")
> ### * idd35
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: idd35
> ### Title: Type 1 Diabetes susceptibility loci Idd3 and Idd5
> ### Aliases: idd35
> ### Keywords: datasets
> 
> ### ** Examples
> 
>   data(idd35)
>   table(idd35)
, , group = controls

    idd5
idd3 NN BB
  NN 18 48
  BB 47 89

, , group = cases

    idd5
idd3 NN BB
  NN 55 42
  BB 12  2

> 
> 
> 
> cleanEx(); nameEx("wam")
> ### * wam
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: wam
> ### Title: Women and Mathematics
> ### Aliases: wam
> ### Keywords: datasets
> 
> ### ** Examples
> 
>   data(wam)
>   gm.analysis(wam, program="coco")

 CoCo     -     A program for estimation, test and model search
 in very large `Co'mplete and `InCo'mplete `Co'ntingency tables.
 1.5.4               Wed Aug 10 14:00:00 CEST 2005
 Compiled with cc, a C compiler for ...           
 Copyright (c) 1991, by Jens Henrik Badsberg      
 Licensed to ...                                  


 Finding all marginals.
 1190 cases read.

   Edge        DF   #0  -2log(Q)       P  PowerDiv       P       X^2       P    Models

   [ab]        16    0   18.5848 0.29020   18.3927 0.30084   18.3515 0.30316    [[abcdef]] / [[acdef][bcdef]]
   [ac]        16    0   20.6885 0.19044   20.4751 0.19920   20.4286 0.20114    [[abcdef]] / [[abdef][bcdef]]
   [ad]        16    0   14.1724 0.58634   14.0882 0.59266   14.0632 0.59453    [[abcdef]] / [[abcef][bcdef]]
   [ae]        16    0   18.7813 0.27958   18.6323 0.28761   18.6066 0.28901    [[abcdef]] / [[abcdf][bcdef]]
   [af]        16    0   11.9511 0.74821   11.8496 0.75511   11.8451 0.75541    [[abcdef]] / [[abcde][bcdef]]
   [bc]        16    0   26.7393 0.04416   26.3695 0.04872   26.2710 0.05001    [[abcdef]] / [[abdef][acdef]]
   [bd]        16    0   34.7333 0.00458   34.3905 0.00506   34.3643 0.00510    [[abcdef]] / [[abcef][acdef]]
   [be]        16    0   56.5699 0.00002   55.7005 0.00002   55.6091 0.00002    [[abcdef]] / [[abcdf][acdef]]
   [bf]        16    0   11.6731 0.76694   11.4091 0.78424   11.3456 0.78832    [[abcdef]] / [[abcde][acdef]]
   [cd]        16    0   29.4391 0.02100   28.3661 0.02834   28.0759 0.03071    [[abcdef]] / [[abcef][abdef]]
   [ce]        16    0   26.0525 0.05297   25.3980 0.06280   25.1834 0.06635    [[abcdef]] / [[abcdf][abdef]]
   [cf]        16    0   81.6569 0.00000   81.2703 0.00000   82.5676 0.00000    [[abcdef]] / [[abcde][abdef]]
   [de]        16    0   78.2477 0.00000   79.2366 0.00000   80.2779 0.00000    [[abcdef]] / [[abcdf][abcef]]
   [df]        16    0   46.2210 0.00020   45.8973 0.00022   46.4621 0.00019    [[abcdef]] / [[abcde][abcef]]
   [ef]        16    0   17.7282 0.33961   18.1214 0.31630   18.4347 0.29849    [[abcdef]] / [[abcde][abcdf]]

 Accepted edges:    [[bf][af][ad][ef][ab][ae][ac][ce]]
Warning, ended CoCo-objects: .current.coco.
$strategy
[1] "backwards"

$model
[1] "a,bcd,bde,cdf"

$edge.measure
[1] "gamma.cond"

$analysis
  a           b           c            d            e           f
a 0 -0.05485397 -0.04436239  0.050528637  0.003409161 -0.01770452
b 0  0.00000000  0.07185629 -0.292079533 -0.351141331  0.04743012
c 0  0.00000000  0.00000000 -0.000568782  0.234541043 -0.55352956
d 0  0.00000000  0.00000000  0.000000000  0.495578575  0.37428525
e 0  0.00000000  0.00000000  0.000000000  0.000000000  0.08546841
f 0  0.00000000  0.00000000  0.000000000  0.000000000  0.00000000

$`variable names`
     [,1] [,2]     
[1,] "a"  "lecture"
[2,] "b"  "gender" 
[3,] "c"  "school" 
[4,] "d"  "work"   
[5,] "e"  "subject"
[6,] "f"  "plans"  

> 
> 
> 
> cleanEx(); nameEx("wynder")
> ### * wynder
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: wynder
> ### Title: Alcohol, Smoking and Oral Cancer
> ### Aliases: wynder
> ### Keywords: datasets
> 
> ### ** Examples
> 
>   data(wynder)
>   tab <- table(wynder)
>   dimnames(tab) <- list(c("<1","1-6",">6"), c("<15","16-34",">34"), c("controls","cases"))  
>   names(dimnames(tab)) <- c("Alcohol (unit/day)","Smoking (cigarettes/day)","Group")  
>   tab
, , Group = controls

                  Smoking (cigarettes/day)
Alcohol (unit/day) <15 16-34 >34
               <1   31    32   3
               1-6  13    36   9
               >6    2     9   4

, , Group = cases

                  Smoking (cigarettes/day)
Alcohol (unit/day) <15 16-34 >34
               <1   16    40  13
               1-6  23    76  21
               >6   10    65  40

> 
> 
> 
> ### * <FOOTER>
> ###
> cat("Time elapsed: ", proc.time() - get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  91.71 16.11 150.72 NA NA 
> grDevices::dev.off()
postscript 
         2 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
